/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\n/*! main.js © yamoo9.net, 2016 */\n\n// ------------------------------------\n// 빌드 시에 아래 주석을 해제한 후, 빌드\n// ------------------------------------\n// require('jquery');\n\n// Angular 로드\nvar angular = __webpack_require__(1);\n\n// 의존 모듈 로드\n__webpack_require__(2);\n__webpack_require__(4);\n__webpack_require__(5);\n__webpack_require__(6);\n\n// App 모듈 정의 (의존 모듈 주입)\nvar bipan = angular.module('BipanListApp', ['ngResource', 'infinite-scroll', 'angularSpinner']);\n\n// 모듈 환경 설정\nbipan.config(['$httpProvider', '$resourceProvider', 'usSpinnerConfigProvider', function ($httpProvider, $resourceProvider, usSpinnerConfigProvider) {\n  var token = 'Token dab1748ebaceb34ed6796bc3b7dc84741b77af54';\n  $httpProvider.defaults.headers.common['Authorization'] = token;\n  $resourceProvider.defaults.stripTrailingSlashes = false;\n  // usSpinnerConfigProvider\n  usSpinnerConfigProvider.setTheme('white-spinner', {\n    'color': '#ffffff',\n    'radius': 25,\n    'width': 6,\n    'length': 21,\n    'lines': 17,\n    'scale': 0.45\n  });\n}]);\n\n// Controllers\n__webpack_require__(7);\n__webpack_require__(8);\n// Services\n__webpack_require__(9);\n// Filters\n__webpack_require__(10);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvbWFpbi5lczY/ZTgxYiJdLCJuYW1lcyI6WyJhbmd1bGFyIiwicmVxdWlyZSIsImJpcGFuIiwibW9kdWxlIiwiY29uZmlnIiwiJGh0dHBQcm92aWRlciIsIiRyZXNvdXJjZVByb3ZpZGVyIiwidXNTcGlubmVyQ29uZmlnUHJvdmlkZXIiLCJ0b2tlbiIsImRlZmF1bHRzIiwiaGVhZGVycyIsImNvbW1vbiIsInN0cmlwVHJhaWxpbmdTbGFzaGVzIiwic2V0VGhlbWUiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJQSxVQUFVLG1CQUFBQyxDQUFRLENBQVIsQ0FBZDs7QUFFQTtBQUNBLG1CQUFBQSxDQUFRLENBQVI7QUFDQSxtQkFBQUEsQ0FBUSxDQUFSO0FBQ0EsbUJBQUFBLENBQVEsQ0FBUjtBQUNBLG1CQUFBQSxDQUFRLENBQVI7O0FBRUE7QUFDQSxJQUFJQyxRQUFRRixRQUFRRyxNQUFSLENBQWUsY0FBZixFQUErQixDQUM3QixZQUQ2QixFQUU3QixpQkFGNkIsRUFHN0IsZ0JBSDZCLENBQS9CLENBQVo7O0FBTUE7QUFDQUQsTUFBTUUsTUFBTixDQUFhLENBQ1gsZUFEVyxFQUVYLG1CQUZXLEVBR1gseUJBSFcsRUFJWCxVQUFDQyxhQUFELEVBQWdCQyxpQkFBaEIsRUFBbUNDLHVCQUFuQyxFQUE4RDtBQUM5RCxNQUFJQyxRQUFRLGdEQUFaO0FBQ0FILGdCQUFjSSxRQUFkLENBQXVCQyxPQUF2QixDQUErQkMsTUFBL0IsQ0FBc0MsZUFBdEMsSUFBeURILEtBQXpEO0FBQ0FGLG9CQUFrQkcsUUFBbEIsQ0FBMkJHLG9CQUEzQixHQUFrRCxLQUFsRDtBQUNBO0FBQ0FMLDBCQUF3Qk0sUUFBeEIsQ0FBaUMsZUFBakMsRUFBa0Q7QUFDaEQsYUFBVyxTQURxQztBQUVoRCxjQUFXLEVBRnFDO0FBR2hELGFBQVcsQ0FIcUM7QUFJaEQsY0FBVyxFQUpxQztBQUtoRCxhQUFXLEVBTHFDO0FBTWhELGFBQVc7QUFOcUMsR0FBbEQ7QUFRRCxDQWpCWSxDQUFiOztBQW1CQTtBQUNBLG1CQUFBWixDQUFRLENBQVI7QUFDQSxtQkFBQUEsQ0FBUSxDQUFSO0FBQ0E7QUFDQSxtQkFBQUEsQ0FBUSxDQUFSO0FBQ0E7QUFDQSxtQkFBQUEsQ0FBUSxFQUFSIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgbWFpbi5qcyDCqSB5YW1vbzkubmV0LCAyMDE2ICovXG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuLy8g67mM65OcIOyLnOyXkCDslYTrnpgg7KO87ISd7J2EIO2VtOygnO2VnCDtm4QsIOu5jOuTnFxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4vLyByZXF1aXJlKCdqcXVlcnknKTtcblxuLy8gQW5ndWxhciDroZzrk5xcbmxldCBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xuXG4vLyDsnZjsobQg66qo65OIIOuhnOuTnFxucmVxdWlyZSgnYW5ndWxhci1yZXNvdXJjZScpO1xucmVxdWlyZSgnbmctaW5maW5pdGUtc2Nyb2xsJyk7XG5yZXF1aXJlKCdzcGluJyk7XG5yZXF1aXJlKCdhbmd1bGFyLXNwaW5uZXInKTtcblxuLy8gQXBwIOuqqOuTiCDsoJXsnZggKOydmOyhtCDrqqjrk4gg7KO87J6FKVxubGV0IGJpcGFuID0gYW5ndWxhci5tb2R1bGUoJ0JpcGFuTGlzdEFwcCcsIFtcbiAgICAgICAgICAgICAgJ25nUmVzb3VyY2UnLFxuICAgICAgICAgICAgICAnaW5maW5pdGUtc2Nyb2xsJyxcbiAgICAgICAgICAgICAgJ2FuZ3VsYXJTcGlubmVyJ1xuICAgICAgICAgICAgXSk7XG5cbi8vIOuqqOuTiCDtmZjqsr0g7ISk7KCVXG5iaXBhbi5jb25maWcoW1xuICAnJGh0dHBQcm92aWRlcicsXG4gICckcmVzb3VyY2VQcm92aWRlcicsXG4gICd1c1NwaW5uZXJDb25maWdQcm92aWRlcicsXG4gICgkaHR0cFByb3ZpZGVyLCAkcmVzb3VyY2VQcm92aWRlciwgdXNTcGlubmVyQ29uZmlnUHJvdmlkZXIpPT4ge1xuICBsZXQgdG9rZW4gPSAnVG9rZW4gZGFiMTc0OGViYWNlYjM0ZWQ2Nzk2YmMzYjdkYzg0NzQxYjc3YWY1NCc7XG4gICRodHRwUHJvdmlkZXIuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ0F1dGhvcml6YXRpb24nXSA9IHRva2VuO1xuICAkcmVzb3VyY2VQcm92aWRlci5kZWZhdWx0cy5zdHJpcFRyYWlsaW5nU2xhc2hlcyA9IGZhbHNlO1xuICAvLyB1c1NwaW5uZXJDb25maWdQcm92aWRlclxuICB1c1NwaW5uZXJDb25maWdQcm92aWRlci5zZXRUaGVtZSgnd2hpdGUtc3Bpbm5lcicsIHtcbiAgICAnY29sb3InICA6ICcjZmZmZmZmJyxcbiAgICAncmFkaXVzJyA6IDI1LFxuICAgICd3aWR0aCcgIDogNixcbiAgICAnbGVuZ3RoJyA6IDIxLFxuICAgICdsaW5lcycgIDogMTcsXG4gICAgJ3NjYWxlJyAgOiAwLjQ1LFxuICB9KTtcbn1dKTtcblxuLy8gQ29udHJvbGxlcnNcbnJlcXVpcmUoJy4vY29udHJvbGxlcnMvTGlzdENvbnRyb2xsZXInKTtcbnJlcXVpcmUoJy4vY29udHJvbGxlcnMvRGV0YWlsQ29udHJvbGxlcicpO1xuLy8gU2VydmljZXNcbnJlcXVpcmUoJy4vc2VydmljZXMvTGlzdERhdGFTaGFyZVNlcnZpY2UnKTtcbi8vIEZpbHRlcnNcbnJlcXVpcmUoJy4vZmlsdGVycy9yZWFkaW5nWmVyb0ZpbHRlcicpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL21haW4uZXM2Il0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 1 */
/***/ function(module, exports) {

	eval("module.exports = angular;//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJhbmd1bGFyXCI/MTFkMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBhbmd1bGFyO1xuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIGV4dGVybmFsIFwiYW5ndWxhclwiXG4vLyBtb2R1bGUgaWQgPSAxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("__webpack_require__(3);\nmodule.exports = 'ngResource';\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2FuZ3VsYXItcmVzb3VyY2UvaW5kZXguanM/NDE4NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJyZXF1aXJlKCcuL2FuZ3VsYXItcmVzb3VyY2UnKTtcbm1vZHVsZS5leHBvcnRzID0gJ25nUmVzb3VyY2UnO1xuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2FuZ3VsYXItcmVzb3VyY2UvaW5kZXguanNcbi8vIG1vZHVsZSBpZCA9IDJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 3 */
/***/ function(module, exports) {

	eval("/**\n * @license AngularJS v1.5.9\n * (c) 2010-2016 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular) {'use strict';\n\nvar $resourceMinErr = angular.$$minErr('$resource');\n\n// Helper functions and regex to lookup a dotted path on an object\n// stopping at undefined/null.  The path must be composed of ASCII\n// identifiers (just like $parse)\nvar MEMBER_NAME_REGEX = /^(\\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;\n\nfunction isValidDottedPath(path) {\n  return (path != null && path !== '' && path !== 'hasOwnProperty' &&\n      MEMBER_NAME_REGEX.test('.' + path));\n}\n\nfunction lookupDottedPath(obj, path) {\n  if (!isValidDottedPath(path)) {\n    throw $resourceMinErr('badmember', 'Dotted member path \"@{0}\" is invalid.', path);\n  }\n  var keys = path.split('.');\n  for (var i = 0, ii = keys.length; i < ii && angular.isDefined(obj); i++) {\n    var key = keys[i];\n    obj = (obj !== null) ? obj[key] : undefined;\n  }\n  return obj;\n}\n\n/**\n * Create a shallow copy of an object and clear other fields from the destination\n */\nfunction shallowClearAndCopy(src, dst) {\n  dst = dst || {};\n\n  angular.forEach(dst, function(value, key) {\n    delete dst[key];\n  });\n\n  for (var key in src) {\n    if (src.hasOwnProperty(key) && !(key.charAt(0) === '$' && key.charAt(1) === '$')) {\n      dst[key] = src[key];\n    }\n  }\n\n  return dst;\n}\n\n/**\n * @ngdoc module\n * @name ngResource\n * @description\n *\n * # ngResource\n *\n * The `ngResource` module provides interaction support with RESTful services\n * via the $resource service.\n *\n *\n * <div doc-module-components=\"ngResource\"></div>\n *\n * See {@link ngResource.$resourceProvider} and {@link ngResource.$resource} for usage.\n */\n\n/**\n * @ngdoc provider\n * @name $resourceProvider\n *\n * @description\n *\n * Use `$resourceProvider` to change the default behavior of the {@link ngResource.$resource}\n * service.\n *\n * ## Dependencies\n * Requires the {@link ngResource } module to be installed.\n *\n */\n\n/**\n * @ngdoc service\n * @name $resource\n * @requires $http\n * @requires ng.$log\n * @requires $q\n * @requires ng.$timeout\n *\n * @description\n * A factory which creates a resource object that lets you interact with\n * [RESTful](http://en.wikipedia.org/wiki/Representational_State_Transfer) server-side data sources.\n *\n * The returned resource object has action methods which provide high-level behaviors without\n * the need to interact with the low level {@link ng.$http $http} service.\n *\n * Requires the {@link ngResource `ngResource`} module to be installed.\n *\n * By default, trailing slashes will be stripped from the calculated URLs,\n * which can pose problems with server backends that do not expect that\n * behavior.  This can be disabled by configuring the `$resourceProvider` like\n * this:\n *\n * ```js\n     app.config(['$resourceProvider', function($resourceProvider) {\n       // Don't strip trailing slashes from calculated URLs\n       $resourceProvider.defaults.stripTrailingSlashes = false;\n     }]);\n * ```\n *\n * @param {string} url A parameterized URL template with parameters prefixed by `:` as in\n *   `/user/:username`. If you are using a URL with a port number (e.g.\n *   `http://example.com:8080/api`), it will be respected.\n *\n *   If you are using a url with a suffix, just add the suffix, like this:\n *   `$resource('http://example.com/resource.json')` or `$resource('http://example.com/:id.json')`\n *   or even `$resource('http://example.com/resource/:resource_id.:format')`\n *   If the parameter before the suffix is empty, :resource_id in this case, then the `/.` will be\n *   collapsed down to a single `.`.  If you need this sequence to appear and not collapse then you\n *   can escape it with `/\\.`.\n *\n * @param {Object=} paramDefaults Default values for `url` parameters. These can be overridden in\n *   `actions` methods. If a parameter value is a function, it will be called every time\n *   a param value needs to be obtained for a request (unless the param was overridden). The function\n *   will be passed the current data value as an argument.\n *\n *   Each key value in the parameter object is first bound to url template if present and then any\n *   excess keys are appended to the url search query after the `?`.\n *\n *   Given a template `/path/:verb` and parameter `{verb:'greet', salutation:'Hello'}` results in\n *   URL `/path/greet?salutation=Hello`.\n *\n *   If the parameter value is prefixed with `@`, then the value for that parameter will be\n *   extracted from the corresponding property on the `data` object (provided when calling a\n *   \"non-GET\" action method).\n *   For example, if the `defaultParam` object is `{someParam: '@someProp'}` then the value of\n *   `someParam` will be `data.someProp`.\n *   Note that the parameter will be ignored, when calling a \"GET\" action method (i.e. an action\n *   method that does not accept a request body)\n *\n * @param {Object.<Object>=} actions Hash with declaration of custom actions that should extend\n *   the default set of resource actions. The declaration should be created in the format of {@link\n *   ng.$http#usage $http.config}:\n *\n *       {action1: {method:?, params:?, isArray:?, headers:?, ...},\n *        action2: {method:?, params:?, isArray:?, headers:?, ...},\n *        ...}\n *\n *   Where:\n *\n *   - **`action`** – {string} – The name of action. This name becomes the name of the method on\n *     your resource object.\n *   - **`method`** – {string} – Case insensitive HTTP method (e.g. `GET`, `POST`, `PUT`,\n *     `DELETE`, `JSONP`, etc).\n *   - **`params`** – {Object=} – Optional set of pre-bound parameters for this action. If any of\n *     the parameter value is a function, it will be called every time when a param value needs to\n *     be obtained for a request (unless the param was overridden). The function will be passed the\n *     current data value as an argument.\n *   - **`url`** – {string} – action specific `url` override. The url templating is supported just\n *     like for the resource-level urls.\n *   - **`isArray`** – {boolean=} – If true then the returned object for this action is an array,\n *     see `returns` section.\n *   - **`transformRequest`** –\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n *     transform function or an array of such functions. The transform function takes the http\n *     request body and headers and returns its transformed (typically serialized) version.\n *     By default, transformRequest will contain one function that checks if the request data is\n *     an object and serializes to using `angular.toJson`. To prevent this behavior, set\n *     `transformRequest` to an empty array: `transformRequest: []`\n *   - **`transformResponse`** –\n *     `{function(data, headersGetter)|Array.<function(data, headersGetter)>}` –\n *     transform function or an array of such functions. The transform function takes the http\n *     response body and headers and returns its transformed (typically deserialized) version.\n *     By default, transformResponse will contain one function that checks if the response looks\n *     like a JSON string and deserializes it using `angular.fromJson`. To prevent this behavior,\n *     set `transformResponse` to an empty array: `transformResponse: []`\n *   - **`cache`** – `{boolean|Cache}` – If true, a default $http cache will be used to cache the\n *     GET request, otherwise if a cache instance built with\n *     {@link ng.$cacheFactory $cacheFactory}, this cache will be used for\n *     caching.\n *   - **`timeout`** – `{number}` – timeout in milliseconds.<br />\n *     **Note:** In contrast to {@link ng.$http#usage $http.config}, {@link ng.$q promises} are\n *     **not** supported in $resource, because the same value would be used for multiple requests.\n *     If you are looking for a way to cancel requests, you should use the `cancellable` option.\n *   - **`cancellable`** – `{boolean}` – if set to true, the request made by a \"non-instance\" call\n *     will be cancelled (if not already completed) by calling `$cancelRequest()` on the call's\n *     return value. Calling `$cancelRequest()` for a non-cancellable or an already\n *     completed/cancelled request will have no effect.<br />\n *   - **`withCredentials`** - `{boolean}` - whether to set the `withCredentials` flag on the\n *     XHR object. See\n *     [requests with credentials](https://developer.mozilla.org/en/http_access_control#section_5)\n *     for more information.\n *   - **`responseType`** - `{string}` - see\n *     [requestType](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest#responseType).\n *   - **`interceptor`** - `{Object=}` - The interceptor object has two optional methods -\n *     `response` and `responseError`. Both `response` and `responseError` interceptors get called\n *     with `http response` object. See {@link ng.$http $http interceptors}.\n *\n * @param {Object} options Hash with custom settings that should extend the\n *   default `$resourceProvider` behavior.  The supported options are:\n *\n *   - **`stripTrailingSlashes`** – {boolean} – If true then the trailing\n *   slashes from any calculated URL will be stripped. (Defaults to true.)\n *   - **`cancellable`** – {boolean} – If true, the request made by a \"non-instance\" call will be\n *   cancelled (if not already completed) by calling `$cancelRequest()` on the call's return value.\n *   This can be overwritten per action. (Defaults to false.)\n *\n * @returns {Object} A resource \"class\" object with methods for the default set of resource actions\n *   optionally extended with custom `actions`. The default set contains these actions:\n *   ```js\n *   { 'get':    {method:'GET'},\n *     'save':   {method:'POST'},\n *     'query':  {method:'GET', isArray:true},\n *     'remove': {method:'DELETE'},\n *     'delete': {method:'DELETE'} };\n *   ```\n *\n *   Calling these methods invoke an {@link ng.$http} with the specified http method,\n *   destination and parameters. When the data is returned from the server then the object is an\n *   instance of the resource class. The actions `save`, `remove` and `delete` are available on it\n *   as  methods with the `$` prefix. This allows you to easily perform CRUD operations (create,\n *   read, update, delete) on server-side data like this:\n *   ```js\n *   var User = $resource('/user/:userId', {userId:'@id'});\n *   var user = User.get({userId:123}, function() {\n *     user.abc = true;\n *     user.$save();\n *   });\n *   ```\n *\n *   It is important to realize that invoking a $resource object method immediately returns an\n *   empty reference (object or array depending on `isArray`). Once the data is returned from the\n *   server the existing reference is populated with the actual data. This is a useful trick since\n *   usually the resource is assigned to a model which is then rendered by the view. Having an empty\n *   object results in no rendering, once the data arrives from the server then the object is\n *   populated with the data and the view automatically re-renders itself showing the new data. This\n *   means that in most cases one never has to write a callback function for the action methods.\n *\n *   The action methods on the class object or instance object can be invoked with the following\n *   parameters:\n *\n *   - HTTP GET \"class\" actions: `Resource.action([parameters], [success], [error])`\n *   - non-GET \"class\" actions: `Resource.action([parameters], postData, [success], [error])`\n *   - non-GET instance actions:  `instance.$action([parameters], [success], [error])`\n *\n *\n *   Success callback is called with (value, responseHeaders) arguments, where the value is\n *   the populated resource instance or collection object. The error callback is called\n *   with (httpResponse) argument.\n *\n *   Class actions return empty instance (with additional properties below).\n *   Instance actions return promise of the action.\n *\n *   The Resource instances and collections have these additional properties:\n *\n *   - `$promise`: the {@link ng.$q promise} of the original server interaction that created this\n *     instance or collection.\n *\n *     On success, the promise is resolved with the same resource instance or collection object,\n *     updated with data from server. This makes it easy to use in\n *     {@link ngRoute.$routeProvider resolve section of $routeProvider.when()} to defer view\n *     rendering until the resource(s) are loaded.\n *\n *     On failure, the promise is rejected with the {@link ng.$http http response} object, without\n *     the `resource` property.\n *\n *     If an interceptor object was provided, the promise will instead be resolved with the value\n *     returned by the interceptor.\n *\n *   - `$resolved`: `true` after first server interaction is completed (either with success or\n *      rejection), `false` before that. Knowing if the Resource has been resolved is useful in\n *      data-binding.\n *\n *   The Resource instances and collections have these additional methods:\n *\n *   - `$cancelRequest`: If there is a cancellable, pending request related to the instance or\n *      collection, calling this method will abort the request.\n *\n *   The Resource instances have these additional methods:\n *\n *   - `toJSON`: It returns a simple object without any of the extra properties added as part of\n *     the Resource API. This object can be serialized through {@link angular.toJson} safely\n *     without attaching Angular-specific fields. Notice that `JSON.stringify` (and\n *     `angular.toJson`) automatically use this method when serializing a Resource instance\n *     (see [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#toJSON()_behavior)).\n *\n * @example\n *\n * # Credit card resource\n *\n * ```js\n     // Define CreditCard class\n     var CreditCard = $resource('/user/:userId/card/:cardId',\n      {userId:123, cardId:'@id'}, {\n       charge: {method:'POST', params:{charge:true}}\n      });\n\n     // We can retrieve a collection from the server\n     var cards = CreditCard.query(function() {\n       // GET: /user/123/card\n       // server returns: [ {id:456, number:'1234', name:'Smith'} ];\n\n       var card = cards[0];\n       // each item is an instance of CreditCard\n       expect(card instanceof CreditCard).toEqual(true);\n       card.name = \"J. Smith\";\n       // non GET methods are mapped onto the instances\n       card.$save();\n       // POST: /user/123/card/456 {id:456, number:'1234', name:'J. Smith'}\n       // server returns: {id:456, number:'1234', name: 'J. Smith'};\n\n       // our custom method is mapped as well.\n       card.$charge({amount:9.99});\n       // POST: /user/123/card/456?amount=9.99&charge=true {id:456, number:'1234', name:'J. Smith'}\n     });\n\n     // we can create an instance as well\n     var newCard = new CreditCard({number:'0123'});\n     newCard.name = \"Mike Smith\";\n     newCard.$save();\n     // POST: /user/123/card {number:'0123', name:'Mike Smith'}\n     // server returns: {id:789, number:'0123', name: 'Mike Smith'};\n     expect(newCard.id).toEqual(789);\n * ```\n *\n * The object returned from this function execution is a resource \"class\" which has \"static\" method\n * for each action in the definition.\n *\n * Calling these methods invoke `$http` on the `url` template with the given `method`, `params` and\n * `headers`.\n *\n * @example\n *\n * # User resource\n *\n * When the data is returned from the server then the object is an instance of the resource type and\n * all of the non-GET methods are available with `$` prefix. This allows you to easily support CRUD\n * operations (create, read, update, delete) on server-side data.\n\n   ```js\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123}, function(user) {\n       user.abc = true;\n       user.$save();\n     });\n   ```\n *\n * It's worth noting that the success callback for `get`, `query` and other methods gets passed\n * in the response that came from the server as well as $http header getter function, so one\n * could rewrite the above example and get access to http headers as:\n *\n   ```js\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123}, function(user, getResponseHeaders){\n       user.abc = true;\n       user.$save(function(user, putResponseHeaders) {\n         //user => saved user object\n         //putResponseHeaders => $http header getter\n       });\n     });\n   ```\n *\n * You can also access the raw `$http` promise via the `$promise` property on the object returned\n *\n   ```\n     var User = $resource('/user/:userId', {userId:'@id'});\n     User.get({userId:123})\n         .$promise.then(function(user) {\n           $scope.user = user;\n         });\n   ```\n *\n * @example\n *\n * # Creating a custom 'PUT' request\n *\n * In this example we create a custom method on our resource to make a PUT request\n * ```js\n *    var app = angular.module('app', ['ngResource', 'ngRoute']);\n *\n *    // Some APIs expect a PUT request in the format URL/object/ID\n *    // Here we are creating an 'update' method\n *    app.factory('Notes', ['$resource', function($resource) {\n *    return $resource('/notes/:id', null,\n *        {\n *            'update': { method:'PUT' }\n *        });\n *    }]);\n *\n *    // In our controller we get the ID from the URL using ngRoute and $routeParams\n *    // We pass in $routeParams and our Notes factory along with $scope\n *    app.controller('NotesCtrl', ['$scope', '$routeParams', 'Notes',\n                                      function($scope, $routeParams, Notes) {\n *    // First get a note object from the factory\n *    var note = Notes.get({ id:$routeParams.id });\n *    $id = note.id;\n *\n *    // Now call update passing in the ID first then the object you are updating\n *    Notes.update({ id:$id }, note);\n *\n *    // This will PUT /notes/ID with the note object in the request payload\n *    }]);\n * ```\n *\n * @example\n *\n * # Cancelling requests\n *\n * If an action's configuration specifies that it is cancellable, you can cancel the request related\n * to an instance or collection (as long as it is a result of a \"non-instance\" call):\n *\n   ```js\n     // ...defining the `Hotel` resource...\n     var Hotel = $resource('/api/hotel/:id', {id: '@id'}, {\n       // Let's make the `query()` method cancellable\n       query: {method: 'get', isArray: true, cancellable: true}\n     });\n\n     // ...somewhere in the PlanVacationController...\n     ...\n     this.onDestinationChanged = function onDestinationChanged(destination) {\n       // We don't care about any pending request for hotels\n       // in a different destination any more\n       this.availableHotels.$cancelRequest();\n\n       // Let's query for hotels in '<destination>'\n       // (calls: /api/hotel?location=<destination>)\n       this.availableHotels = Hotel.query({location: destination});\n     };\n   ```\n *\n */\nangular.module('ngResource', ['ng']).\n  provider('$resource', function ResourceProvider() {\n    var PROTOCOL_AND_DOMAIN_REGEX = /^https?:\\/\\/[^\\/]*/;\n\n    var provider = this;\n\n    /**\n     * @ngdoc property\n     * @name $resourceProvider#defaults\n     * @description\n     * Object containing default options used when creating `$resource` instances.\n     *\n     * The default values satisfy a wide range of usecases, but you may choose to overwrite any of\n     * them to further customize your instances. The available properties are:\n     *\n     * - **stripTrailingSlashes** – `{boolean}` – If true, then the trailing slashes from any\n     *   calculated URL will be stripped.<br />\n     *   (Defaults to true.)\n     * - **cancellable** – `{boolean}` – If true, the request made by a \"non-instance\" call will be\n     *   cancelled (if not already completed) by calling `$cancelRequest()` on the call's return\n     *   value. For more details, see {@link ngResource.$resource}. This can be overwritten per\n     *   resource class or action.<br />\n     *   (Defaults to false.)\n     * - **actions** - `{Object.<Object>}` - A hash with default actions declarations. Actions are\n     *   high-level methods corresponding to RESTful actions/methods on resources. An action may\n     *   specify what HTTP method to use, what URL to hit, if the return value will be a single\n     *   object or a collection (array) of objects etc. For more details, see\n     *   {@link ngResource.$resource}. The actions can also be enhanced or overwritten per resource\n     *   class.<br />\n     *   The default actions are:\n     *   ```js\n     *   {\n     *     get: {method: 'GET'},\n     *     save: {method: 'POST'},\n     *     query: {method: 'GET', isArray: true},\n     *     remove: {method: 'DELETE'},\n     *     delete: {method: 'DELETE'}\n     *   }\n     *   ```\n     *\n     * #### Example\n     *\n     * For example, you can specify a new `update` action that uses the `PUT` HTTP verb:\n     *\n     * ```js\n     *   angular.\n     *     module('myApp').\n     *     config(['resourceProvider', function ($resourceProvider) {\n     *       $resourceProvider.defaults.actions.update = {\n     *         method: 'PUT'\n     *       };\n     *     });\n     * ```\n     *\n     * Or you can even overwrite the whole `actions` list and specify your own:\n     *\n     * ```js\n     *   angular.\n     *     module('myApp').\n     *     config(['resourceProvider', function ($resourceProvider) {\n     *       $resourceProvider.defaults.actions = {\n     *         create: {method: 'POST'}\n     *         get:    {method: 'GET'},\n     *         getAll: {method: 'GET', isArray:true},\n     *         update: {method: 'PUT'},\n     *         delete: {method: 'DELETE'}\n     *       };\n     *     });\n     * ```\n     *\n     */\n    this.defaults = {\n      // Strip slashes by default\n      stripTrailingSlashes: true,\n\n      // Make non-instance requests cancellable (via `$cancelRequest()`)\n      cancellable: false,\n\n      // Default actions configuration\n      actions: {\n        'get': {method: 'GET'},\n        'save': {method: 'POST'},\n        'query': {method: 'GET', isArray: true},\n        'remove': {method: 'DELETE'},\n        'delete': {method: 'DELETE'}\n      }\n    };\n\n    this.$get = ['$http', '$log', '$q', '$timeout', function($http, $log, $q, $timeout) {\n\n      var noop = angular.noop,\n        forEach = angular.forEach,\n        extend = angular.extend,\n        copy = angular.copy,\n        isFunction = angular.isFunction;\n\n      /**\n       * We need our custom method because encodeURIComponent is too aggressive and doesn't follow\n       * http://www.ietf.org/rfc/rfc3986.txt with regards to the character set\n       * (pchar) allowed in path segments:\n       *    segment       = *pchar\n       *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n       *    pct-encoded   = \"%\" HEXDIG HEXDIG\n       *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n       *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n       *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n       */\n      function encodeUriSegment(val) {\n        return encodeUriQuery(val, true).\n          replace(/%26/gi, '&').\n          replace(/%3D/gi, '=').\n          replace(/%2B/gi, '+');\n      }\n\n\n      /**\n       * This method is intended for encoding *key* or *value* parts of query component. We need a\n       * custom method because encodeURIComponent is too aggressive and encodes stuff that doesn't\n       * have to be encoded per http://tools.ietf.org/html/rfc3986:\n       *    query       = *( pchar / \"/\" / \"?\" )\n       *    pchar         = unreserved / pct-encoded / sub-delims / \":\" / \"@\"\n       *    unreserved    = ALPHA / DIGIT / \"-\" / \".\" / \"_\" / \"~\"\n       *    pct-encoded   = \"%\" HEXDIG HEXDIG\n       *    sub-delims    = \"!\" / \"$\" / \"&\" / \"'\" / \"(\" / \")\"\n       *                     / \"*\" / \"+\" / \",\" / \";\" / \"=\"\n       */\n      function encodeUriQuery(val, pctEncodeSpaces) {\n        return encodeURIComponent(val).\n          replace(/%40/gi, '@').\n          replace(/%3A/gi, ':').\n          replace(/%24/g, '$').\n          replace(/%2C/gi, ',').\n          replace(/%20/g, (pctEncodeSpaces ? '%20' : '+'));\n      }\n\n      function Route(template, defaults) {\n        this.template = template;\n        this.defaults = extend({}, provider.defaults, defaults);\n        this.urlParams = {};\n      }\n\n      Route.prototype = {\n        setUrlParams: function(config, params, actionUrl) {\n          var self = this,\n            url = actionUrl || self.template,\n            val,\n            encodedVal,\n            protocolAndDomain = '';\n\n          var urlParams = self.urlParams = {};\n          forEach(url.split(/\\W/), function(param) {\n            if (param === 'hasOwnProperty') {\n              throw $resourceMinErr('badname', 'hasOwnProperty is not a valid parameter name.');\n            }\n            if (!(new RegExp('^\\\\d+$').test(param)) && param &&\n              (new RegExp('(^|[^\\\\\\\\]):' + param + '(\\\\W|$)').test(url))) {\n              urlParams[param] = {\n                isQueryParamValue: (new RegExp('\\\\?.*=:' + param + '(?:\\\\W|$)')).test(url)\n              };\n            }\n          });\n          url = url.replace(/\\\\:/g, ':');\n          url = url.replace(PROTOCOL_AND_DOMAIN_REGEX, function(match) {\n            protocolAndDomain = match;\n            return '';\n          });\n\n          params = params || {};\n          forEach(self.urlParams, function(paramInfo, urlParam) {\n            val = params.hasOwnProperty(urlParam) ? params[urlParam] : self.defaults[urlParam];\n            if (angular.isDefined(val) && val !== null) {\n              if (paramInfo.isQueryParamValue) {\n                encodedVal = encodeUriQuery(val, true);\n              } else {\n                encodedVal = encodeUriSegment(val);\n              }\n              url = url.replace(new RegExp(':' + urlParam + '(\\\\W|$)', 'g'), function(match, p1) {\n                return encodedVal + p1;\n              });\n            } else {\n              url = url.replace(new RegExp('(/?):' + urlParam + '(\\\\W|$)', 'g'), function(match,\n                  leadingSlashes, tail) {\n                if (tail.charAt(0) === '/') {\n                  return tail;\n                } else {\n                  return leadingSlashes + tail;\n                }\n              });\n            }\n          });\n\n          // strip trailing slashes and set the url (unless this behavior is specifically disabled)\n          if (self.defaults.stripTrailingSlashes) {\n            url = url.replace(/\\/+$/, '') || '/';\n          }\n\n          // then replace collapse `/.` if found in the last URL path segment before the query\n          // E.g. `http://url.com/id./format?q=x` becomes `http://url.com/id.format?q=x`\n          url = url.replace(/\\/\\.(?=\\w+($|\\?))/, '.');\n          // replace escaped `/\\.` with `/.`\n          config.url = protocolAndDomain + url.replace(/\\/\\\\\\./, '/.');\n\n\n          // set params - delegate param encoding to $http\n          forEach(params, function(value, key) {\n            if (!self.urlParams[key]) {\n              config.params = config.params || {};\n              config.params[key] = value;\n            }\n          });\n        }\n      };\n\n\n      function resourceFactory(url, paramDefaults, actions, options) {\n        var route = new Route(url, options);\n\n        actions = extend({}, provider.defaults.actions, actions);\n\n        function extractParams(data, actionParams) {\n          var ids = {};\n          actionParams = extend({}, paramDefaults, actionParams);\n          forEach(actionParams, function(value, key) {\n            if (isFunction(value)) { value = value(data); }\n            ids[key] = value && value.charAt && value.charAt(0) === '@' ?\n              lookupDottedPath(data, value.substr(1)) : value;\n          });\n          return ids;\n        }\n\n        function defaultResponseInterceptor(response) {\n          return response.resource;\n        }\n\n        function Resource(value) {\n          shallowClearAndCopy(value || {}, this);\n        }\n\n        Resource.prototype.toJSON = function() {\n          var data = extend({}, this);\n          delete data.$promise;\n          delete data.$resolved;\n          return data;\n        };\n\n        forEach(actions, function(action, name) {\n          var hasBody = /^(POST|PUT|PATCH)$/i.test(action.method);\n          var numericTimeout = action.timeout;\n          var cancellable = angular.isDefined(action.cancellable) ? action.cancellable :\n              (options && angular.isDefined(options.cancellable)) ? options.cancellable :\n              provider.defaults.cancellable;\n\n          if (numericTimeout && !angular.isNumber(numericTimeout)) {\n            $log.debug('ngResource:\\n' +\n                       '  Only numeric values are allowed as `timeout`.\\n' +\n                       '  Promises are not supported in $resource, because the same value would ' +\n                       'be used for multiple requests. If you are looking for a way to cancel ' +\n                       'requests, you should use the `cancellable` option.');\n            delete action.timeout;\n            numericTimeout = null;\n          }\n\n          Resource[name] = function(a1, a2, a3, a4) {\n            var params = {}, data, success, error;\n\n            switch (arguments.length) {\n              case 4:\n                error = a4;\n                success = a3;\n                // falls through\n              case 3:\n              case 2:\n                if (isFunction(a2)) {\n                  if (isFunction(a1)) {\n                    success = a1;\n                    error = a2;\n                    break;\n                  }\n\n                  success = a2;\n                  error = a3;\n                  // falls through\n                } else {\n                  params = a1;\n                  data = a2;\n                  success = a3;\n                  break;\n                }\n                // falls through\n              case 1:\n                if (isFunction(a1)) success = a1;\n                else if (hasBody) data = a1;\n                else params = a1;\n                break;\n              case 0: break;\n              default:\n                throw $resourceMinErr('badargs',\n                  'Expected up to 4 arguments [params, data, success, error], got {0} arguments',\n                  arguments.length);\n            }\n\n            var isInstanceCall = this instanceof Resource;\n            var value = isInstanceCall ? data : (action.isArray ? [] : new Resource(data));\n            var httpConfig = {};\n            var responseInterceptor = action.interceptor && action.interceptor.response ||\n              defaultResponseInterceptor;\n            var responseErrorInterceptor = action.interceptor && action.interceptor.responseError ||\n              undefined;\n            var timeoutDeferred;\n            var numericTimeoutPromise;\n\n            forEach(action, function(value, key) {\n              switch (key) {\n                default:\n                  httpConfig[key] = copy(value);\n                  break;\n                case 'params':\n                case 'isArray':\n                case 'interceptor':\n                case 'cancellable':\n                  break;\n              }\n            });\n\n            if (!isInstanceCall && cancellable) {\n              timeoutDeferred = $q.defer();\n              httpConfig.timeout = timeoutDeferred.promise;\n\n              if (numericTimeout) {\n                numericTimeoutPromise = $timeout(timeoutDeferred.resolve, numericTimeout);\n              }\n            }\n\n            if (hasBody) httpConfig.data = data;\n            route.setUrlParams(httpConfig,\n              extend({}, extractParams(data, action.params || {}), params),\n              action.url);\n\n            var promise = $http(httpConfig).then(function(response) {\n              var data = response.data;\n\n              if (data) {\n                // Need to convert action.isArray to boolean in case it is undefined\n                if (angular.isArray(data) !== (!!action.isArray)) {\n                  throw $resourceMinErr('badcfg',\n                      'Error in resource configuration for action `{0}`. Expected response to ' +\n                      'contain an {1} but got an {2} (Request: {3} {4})', name, action.isArray ? 'array' : 'object',\n                    angular.isArray(data) ? 'array' : 'object', httpConfig.method, httpConfig.url);\n                }\n                if (action.isArray) {\n                  value.length = 0;\n                  forEach(data, function(item) {\n                    if (typeof item === 'object') {\n                      value.push(new Resource(item));\n                    } else {\n                      // Valid JSON values may be string literals, and these should not be converted\n                      // into objects. These items will not have access to the Resource prototype\n                      // methods, but unfortunately there\n                      value.push(item);\n                    }\n                  });\n                } else {\n                  var promise = value.$promise;     // Save the promise\n                  shallowClearAndCopy(data, value);\n                  value.$promise = promise;         // Restore the promise\n                }\n              }\n              response.resource = value;\n\n              return response;\n            }, function(response) {\n              (error || noop)(response);\n              return $q.reject(response);\n            });\n\n            promise['finally'](function() {\n              value.$resolved = true;\n              if (!isInstanceCall && cancellable) {\n                value.$cancelRequest = angular.noop;\n                $timeout.cancel(numericTimeoutPromise);\n                timeoutDeferred = numericTimeoutPromise = httpConfig.timeout = null;\n              }\n            });\n\n            promise = promise.then(\n              function(response) {\n                var value = responseInterceptor(response);\n                (success || noop)(value, response.headers);\n                return value;\n              },\n              responseErrorInterceptor);\n\n            if (!isInstanceCall) {\n              // we are creating instance / collection\n              // - set the initial promise\n              // - return the instance / collection\n              value.$promise = promise;\n              value.$resolved = false;\n              if (cancellable) value.$cancelRequest = timeoutDeferred.resolve;\n\n              return value;\n            }\n\n            // instance call\n            return promise;\n          };\n\n\n          Resource.prototype['$' + name] = function(params, success, error) {\n            if (isFunction(params)) {\n              error = success; success = params; params = {};\n            }\n            var result = Resource[name].call(this, params, this, success, error);\n            return result.$promise || result;\n          };\n        });\n\n        Resource.bind = function(additionalParamDefaults) {\n          return resourceFactory(url, extend({}, paramDefaults, additionalParamDefaults), actions);\n        };\n\n        return Resource;\n      }\n\n      return resourceFactory;\n    }];\n  });\n\n\n})(window, window.angular);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 4 */
/***/ function(module, exports) {

	eval("/* ng-infinite-scroll - v1.3.0 - 2016-06-30 */\nangular.module('infinite-scroll', []).value('THROTTLE_MILLISECONDS', null).directive('infiniteScroll', [\n  '$rootScope', '$window', '$interval', 'THROTTLE_MILLISECONDS', function($rootScope, $window, $interval, THROTTLE_MILLISECONDS) {\n    return {\n      scope: {\n        infiniteScroll: '&',\n        infiniteScrollContainer: '=',\n        infiniteScrollDistance: '=',\n        infiniteScrollDisabled: '=',\n        infiniteScrollUseDocumentBottom: '=',\n        infiniteScrollListenForEvent: '@'\n      },\n      link: function(scope, elem, attrs) {\n        var changeContainer, checkInterval, checkWhenEnabled, container, handleInfiniteScrollContainer, handleInfiniteScrollDisabled, handleInfiniteScrollDistance, handleInfiniteScrollUseDocumentBottom, handler, height, immediateCheck, offsetTop, pageYOffset, scrollDistance, scrollEnabled, throttle, unregisterEventListener, useDocumentBottom, windowElement;\n        windowElement = angular.element($window);\n        scrollDistance = null;\n        scrollEnabled = null;\n        checkWhenEnabled = null;\n        container = null;\n        immediateCheck = true;\n        useDocumentBottom = false;\n        unregisterEventListener = null;\n        checkInterval = false;\n        height = function(elem) {\n          elem = elem[0] || elem;\n          if (isNaN(elem.offsetHeight)) {\n            return elem.document.documentElement.clientHeight;\n          } else {\n            return elem.offsetHeight;\n          }\n        };\n        offsetTop = function(elem) {\n          if (!elem[0].getBoundingClientRect || elem.css('none')) {\n            return;\n          }\n          return elem[0].getBoundingClientRect().top + pageYOffset(elem);\n        };\n        pageYOffset = function(elem) {\n          elem = elem[0] || elem;\n          if (isNaN(window.pageYOffset)) {\n            return elem.document.documentElement.scrollTop;\n          } else {\n            return elem.ownerDocument.defaultView.pageYOffset;\n          }\n        };\n        handler = function() {\n          var containerBottom, containerTopOffset, elementBottom, remaining, shouldScroll;\n          if (container === windowElement) {\n            containerBottom = height(container) + pageYOffset(container[0].document.documentElement);\n            elementBottom = offsetTop(elem) + height(elem);\n          } else {\n            containerBottom = height(container);\n            containerTopOffset = 0;\n            if (offsetTop(container) !== void 0) {\n              containerTopOffset = offsetTop(container);\n            }\n            elementBottom = offsetTop(elem) - containerTopOffset + height(elem);\n          }\n          if (useDocumentBottom) {\n            elementBottom = height((elem[0].ownerDocument || elem[0].document).documentElement);\n          }\n          remaining = elementBottom - containerBottom;\n          shouldScroll = remaining <= height(container) * scrollDistance + 1;\n          if (shouldScroll) {\n            checkWhenEnabled = true;\n            if (scrollEnabled) {\n              if (scope.$$phase || $rootScope.$$phase) {\n                return scope.infiniteScroll();\n              } else {\n                return scope.$apply(scope.infiniteScroll);\n              }\n            }\n          } else {\n            if (checkInterval) {\n              $interval.cancel(checkInterval);\n            }\n            return checkWhenEnabled = false;\n          }\n        };\n        throttle = function(func, wait) {\n          var later, previous, timeout;\n          timeout = null;\n          previous = 0;\n          later = function() {\n            previous = new Date().getTime();\n            $interval.cancel(timeout);\n            timeout = null;\n            return func.call();\n          };\n          return function() {\n            var now, remaining;\n            now = new Date().getTime();\n            remaining = wait - (now - previous);\n            if (remaining <= 0) {\n              $interval.cancel(timeout);\n              timeout = null;\n              previous = now;\n              return func.call();\n            } else {\n              if (!timeout) {\n                return timeout = $interval(later, remaining, 1);\n              }\n            }\n          };\n        };\n        if (THROTTLE_MILLISECONDS != null) {\n          handler = throttle(handler, THROTTLE_MILLISECONDS);\n        }\n        scope.$on('$destroy', function() {\n          container.unbind('scroll', handler);\n          if (unregisterEventListener != null) {\n            unregisterEventListener();\n            unregisterEventListener = null;\n          }\n          if (checkInterval) {\n            return $interval.cancel(checkInterval);\n          }\n        });\n        handleInfiniteScrollDistance = function(v) {\n          return scrollDistance = parseFloat(v) || 0;\n        };\n        scope.$watch('infiniteScrollDistance', handleInfiniteScrollDistance);\n        handleInfiniteScrollDistance(scope.infiniteScrollDistance);\n        handleInfiniteScrollDisabled = function(v) {\n          scrollEnabled = !v;\n          if (scrollEnabled && checkWhenEnabled) {\n            checkWhenEnabled = false;\n            return handler();\n          }\n        };\n        scope.$watch('infiniteScrollDisabled', handleInfiniteScrollDisabled);\n        handleInfiniteScrollDisabled(scope.infiniteScrollDisabled);\n        handleInfiniteScrollUseDocumentBottom = function(v) {\n          return useDocumentBottom = v;\n        };\n        scope.$watch('infiniteScrollUseDocumentBottom', handleInfiniteScrollUseDocumentBottom);\n        handleInfiniteScrollUseDocumentBottom(scope.infiniteScrollUseDocumentBottom);\n        changeContainer = function(newContainer) {\n          if (container != null) {\n            container.unbind('scroll', handler);\n          }\n          container = newContainer;\n          if (newContainer != null) {\n            return container.bind('scroll', handler);\n          }\n        };\n        changeContainer(windowElement);\n        if (scope.infiniteScrollListenForEvent) {\n          unregisterEventListener = $rootScope.$on(scope.infiniteScrollListenForEvent, handler);\n        }\n        handleInfiniteScrollContainer = function(newContainer) {\n          if ((newContainer == null) || newContainer.length === 0) {\n            return;\n          }\n          if (newContainer.nodeType && newContainer.nodeType === 1) {\n            newContainer = angular.element(newContainer);\n          } else if (typeof newContainer.append === 'function') {\n            newContainer = angular.element(newContainer[newContainer.length - 1]);\n          } else if (typeof newContainer === 'string') {\n            newContainer = angular.element(document.querySelector(newContainer));\n          }\n          if (newContainer != null) {\n            return changeContainer(newContainer);\n          } else {\n            throw new Error(\"invalid infinite-scroll-container attribute.\");\n          }\n        };\n        scope.$watch('infiniteScrollContainer', handleInfiniteScrollContainer);\n        handleInfiniteScrollContainer(scope.infiniteScrollContainer || []);\n        if (attrs.infiniteScrollParent != null) {\n          changeContainer(angular.element(elem.parent()));\n        }\n        if (attrs.infiniteScrollImmediateCheck != null) {\n          immediateCheck = scope.$eval(attrs.infiniteScrollImmediateCheck);\n        }\n        return checkInterval = $interval((function() {\n          if (immediateCheck) {\n            handler();\n          }\n          return $interval.cancel(checkInterval);\n        }));\n      }\n    };\n  }\n]);\n\nif (typeof module !== \"undefined\" && typeof exports !== \"undefined\" && module.exports === exports) {\n  module.exports = 'infinite-scroll';\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\n * Copyright (c) 2011-2014 Felix Gnass\n * Licensed under the MIT license\n * http://spin.js.org/\n *\n * Example:\n    var opts = {\n      lines: 12             // The number of lines to draw\n    , length: 7             // The length of each line\n    , width: 5              // The line thickness\n    , radius: 10            // The radius of the inner circle\n    , scale: 1.0            // Scales overall size of the spinner\n    , corners: 1            // Roundness (0..1)\n    , color: '#000'         // #rgb or #rrggbb\n    , opacity: 1/4          // Opacity of the lines\n    , rotate: 0             // Rotation offset\n    , direction: 1          // 1: clockwise, -1: counterclockwise\n    , speed: 1              // Rounds per second\n    , trail: 100            // Afterglow percentage\n    , fps: 20               // Frames per second when using setTimeout()\n    , zIndex: 2e9           // Use a high z-index by default\n    , className: 'spinner'  // CSS class to assign to the element\n    , top: '50%'            // center vertically\n    , left: '50%'           // center horizontally\n    , shadow: false         // Whether to render a shadow\n    , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\n    , position: 'absolute'  // Element positioning\n    }\n    var target = document.getElementById('foo')\n    var spinner = new Spinner(opts).spin(target)\n */\n;(function (root, factory) {\n\n  /* CommonJS */\n  if (typeof module == 'object' && module.exports) module.exports = factory()\n\n  /* AMD module */\n  else if (true) !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\n\n  /* Browser global */\n  else root.Spinner = factory()\n}(this, function () {\n  \"use strict\"\n\n  var prefixes = ['webkit', 'Moz', 'ms', 'O'] /* Vendor prefixes */\n    , animations = {} /* Animation rules keyed by their name */\n    , useCssAnimations /* Whether to use CSS animations or setTimeout */\n    , sheet /* A stylesheet to hold the @keyframe or VML rules. */\n\n  /**\n   * Utility function to create elements. If no tag name is given,\n   * a DIV is created. Optionally properties can be passed.\n   */\n  function createEl (tag, prop) {\n    var el = document.createElement(tag || 'div')\n      , n\n\n    for (n in prop) el[n] = prop[n]\n    return el\n  }\n\n  /**\n   * Appends children and returns the parent.\n   */\n  function ins (parent /* child1, child2, ...*/) {\n    for (var i = 1, n = arguments.length; i < n; i++) {\n      parent.appendChild(arguments[i])\n    }\n\n    return parent\n  }\n\n  /**\n   * Creates an opacity keyframe animation rule and returns its name.\n   * Since most mobile Webkits have timing issues with animation-delay,\n   * we create separate rules for each line/segment.\n   */\n  function addAnimation (alpha, trail, i, lines) {\n    var name = ['opacity', trail, ~~(alpha * 100), i, lines].join('-')\n      , start = 0.01 + i/lines * 100\n      , z = Math.max(1 - (1-alpha) / trail * (100-start), alpha)\n      , prefix = useCssAnimations.substring(0, useCssAnimations.indexOf('Animation')).toLowerCase()\n      , pre = prefix && '-' + prefix + '-' || ''\n\n    if (!animations[name]) {\n      sheet.insertRule(\n        '@' + pre + 'keyframes ' + name + '{' +\n        '0%{opacity:' + z + '}' +\n        start + '%{opacity:' + alpha + '}' +\n        (start+0.01) + '%{opacity:1}' +\n        (start+trail) % 100 + '%{opacity:' + alpha + '}' +\n        '100%{opacity:' + z + '}' +\n        '}', sheet.cssRules.length)\n\n      animations[name] = 1\n    }\n\n    return name\n  }\n\n  /**\n   * Tries various vendor prefixes and returns the first supported property.\n   */\n  function vendor (el, prop) {\n    var s = el.style\n      , pp\n      , i\n\n    prop = prop.charAt(0).toUpperCase() + prop.slice(1)\n    if (s[prop] !== undefined) return prop\n    for (i = 0; i < prefixes.length; i++) {\n      pp = prefixes[i]+prop\n      if (s[pp] !== undefined) return pp\n    }\n  }\n\n  /**\n   * Sets multiple style properties at once.\n   */\n  function css (el, prop) {\n    for (var n in prop) {\n      el.style[vendor(el, n) || n] = prop[n]\n    }\n\n    return el\n  }\n\n  /**\n   * Fills in default values.\n   */\n  function merge (obj) {\n    for (var i = 1; i < arguments.length; i++) {\n      var def = arguments[i]\n      for (var n in def) {\n        if (obj[n] === undefined) obj[n] = def[n]\n      }\n    }\n    return obj\n  }\n\n  /**\n   * Returns the line color from the given string or array.\n   */\n  function getColor (color, idx) {\n    return typeof color == 'string' ? color : color[idx % color.length]\n  }\n\n  // Built-in defaults\n\n  var defaults = {\n    lines: 12             // The number of lines to draw\n  , length: 7             // The length of each line\n  , width: 5              // The line thickness\n  , radius: 10            // The radius of the inner circle\n  , scale: 1.0            // Scales overall size of the spinner\n  , corners: 1            // Roundness (0..1)\n  , color: '#000'         // #rgb or #rrggbb\n  , opacity: 1/4          // Opacity of the lines\n  , rotate: 0             // Rotation offset\n  , direction: 1          // 1: clockwise, -1: counterclockwise\n  , speed: 1              // Rounds per second\n  , trail: 100            // Afterglow percentage\n  , fps: 20               // Frames per second when using setTimeout()\n  , zIndex: 2e9           // Use a high z-index by default\n  , className: 'spinner'  // CSS class to assign to the element\n  , top: '50%'            // center vertically\n  , left: '50%'           // center horizontally\n  , shadow: false         // Whether to render a shadow\n  , hwaccel: false        // Whether to use hardware acceleration (might be buggy)\n  , position: 'absolute'  // Element positioning\n  }\n\n  /** The constructor */\n  function Spinner (o) {\n    this.opts = merge(o || {}, Spinner.defaults, defaults)\n  }\n\n  // Global defaults that override the built-ins:\n  Spinner.defaults = {}\n\n  merge(Spinner.prototype, {\n    /**\n     * Adds the spinner to the given target element. If this instance is already\n     * spinning, it is automatically removed from its previous target b calling\n     * stop() internally.\n     */\n    spin: function (target) {\n      this.stop()\n\n      var self = this\n        , o = self.opts\n        , el = self.el = createEl(null, {className: o.className})\n\n      css(el, {\n        position: o.position\n      , width: 0\n      , zIndex: o.zIndex\n      , left: o.left\n      , top: o.top\n      })\n\n      if (target) {\n        target.insertBefore(el, target.firstChild || null)\n      }\n\n      el.setAttribute('role', 'progressbar')\n      self.lines(el, self.opts)\n\n      if (!useCssAnimations) {\n        // No CSS animation support, use setTimeout() instead\n        var i = 0\n          , start = (o.lines - 1) * (1 - o.direction) / 2\n          , alpha\n          , fps = o.fps\n          , f = fps / o.speed\n          , ostep = (1 - o.opacity) / (f * o.trail / 100)\n          , astep = f / o.lines\n\n        ;(function anim () {\n          i++\n          for (var j = 0; j < o.lines; j++) {\n            alpha = Math.max(1 - (i + (o.lines - j) * astep) % f * ostep, o.opacity)\n\n            self.opacity(el, j * o.direction + start, alpha, o)\n          }\n          self.timeout = self.el && setTimeout(anim, ~~(1000 / fps))\n        })()\n      }\n      return self\n    }\n\n    /**\n     * Stops and removes the Spinner.\n     */\n  , stop: function () {\n      var el = this.el\n      if (el) {\n        clearTimeout(this.timeout)\n        if (el.parentNode) el.parentNode.removeChild(el)\n        this.el = undefined\n      }\n      return this\n    }\n\n    /**\n     * Internal method that draws the individual lines. Will be overwritten\n     * in VML fallback mode below.\n     */\n  , lines: function (el, o) {\n      var i = 0\n        , start = (o.lines - 1) * (1 - o.direction) / 2\n        , seg\n\n      function fill (color, shadow) {\n        return css(createEl(), {\n          position: 'absolute'\n        , width: o.scale * (o.length + o.width) + 'px'\n        , height: o.scale * o.width + 'px'\n        , background: color\n        , boxShadow: shadow\n        , transformOrigin: 'left'\n        , transform: 'rotate(' + ~~(360/o.lines*i + o.rotate) + 'deg) translate(' + o.scale*o.radius + 'px' + ',0)'\n        , borderRadius: (o.corners * o.scale * o.width >> 1) + 'px'\n        })\n      }\n\n      for (; i < o.lines; i++) {\n        seg = css(createEl(), {\n          position: 'absolute'\n        , top: 1 + ~(o.scale * o.width / 2) + 'px'\n        , transform: o.hwaccel ? 'translate3d(0,0,0)' : ''\n        , opacity: o.opacity\n        , animation: useCssAnimations && addAnimation(o.opacity, o.trail, start + i * o.direction, o.lines) + ' ' + 1 / o.speed + 's linear infinite'\n        })\n\n        if (o.shadow) ins(seg, css(fill('#000', '0 0 4px #000'), {top: '2px'}))\n        ins(el, ins(seg, fill(getColor(o.color, i), '0 0 1px rgba(0,0,0,.1)')))\n      }\n      return el\n    }\n\n    /**\n     * Internal method that adjusts the opacity of a single line.\n     * Will be overwritten in VML fallback mode below.\n     */\n  , opacity: function (el, i, val) {\n      if (i < el.childNodes.length) el.childNodes[i].style.opacity = val\n    }\n\n  })\n\n\n  function initVML () {\n\n    /* Utility function to create a VML tag */\n    function vml (tag, attr) {\n      return createEl('<' + tag + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"spin-vml\">', attr)\n    }\n\n    // No CSS transforms but VML support, add a CSS rule for VML elements:\n    sheet.addRule('.spin-vml', 'behavior:url(#default#VML)')\n\n    Spinner.prototype.lines = function (el, o) {\n      var r = o.scale * (o.length + o.width)\n        , s = o.scale * 2 * r\n\n      function grp () {\n        return css(\n          vml('group', {\n            coordsize: s + ' ' + s\n          , coordorigin: -r + ' ' + -r\n          })\n        , { width: s, height: s }\n        )\n      }\n\n      var margin = -(o.width + o.length) * o.scale * 2 + 'px'\n        , g = css(grp(), {position: 'absolute', top: margin, left: margin})\n        , i\n\n      function seg (i, dx, filter) {\n        ins(\n          g\n        , ins(\n            css(grp(), {rotation: 360 / o.lines * i + 'deg', left: ~~dx})\n          , ins(\n              css(\n                vml('roundrect', {arcsize: o.corners})\n              , { width: r\n                , height: o.scale * o.width\n                , left: o.scale * o.radius\n                , top: -o.scale * o.width >> 1\n                , filter: filter\n                }\n              )\n            , vml('fill', {color: getColor(o.color, i), opacity: o.opacity})\n            , vml('stroke', {opacity: 0}) // transparent stroke to fix color bleeding upon opacity change\n            )\n          )\n        )\n      }\n\n      if (o.shadow)\n        for (i = 1; i <= o.lines; i++) {\n          seg(i, -2, 'progid:DXImageTransform.Microsoft.Blur(pixelradius=2,makeshadow=1,shadowopacity=.3)')\n        }\n\n      for (i = 1; i <= o.lines; i++) seg(i)\n      return ins(el, g)\n    }\n\n    Spinner.prototype.opacity = function (el, i, val, o) {\n      var c = el.firstChild\n      o = o.shadow && o.lines || 0\n      if (c && i + o < c.childNodes.length) {\n        c = c.childNodes[i + o]; c = c && c.firstChild; c = c && c.firstChild\n        if (c) c.opacity = val\n      }\n    }\n  }\n\n  if (typeof document !== 'undefined') {\n    sheet = (function () {\n      var el = createEl('style', {type : 'text/css'})\n      ins(document.getElementsByTagName('head')[0], el)\n      return el.sheet || el.styleSheet\n    }())\n\n    var probe = css(createEl('group'), {behavior: 'url(#default#VML)'})\n\n    if (!vendor(probe, 'transform') && probe.adj) initVML()\n    else useCssAnimations = vendor(probe, 'animation')\n  }\n\n  return Spinner\n\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/**\r\n * angular-spinner version 0.8.1\r\n * License: MIT.\r\n * Copyright (C) 2013, 2014, 2015, 2016, Uri Shaked and contributors.\r\n */\r\n\r\n'format amd';\r\n\r\n(function (root) {\r\n\t'use strict';\r\n\r\n\tfunction factory(angular, Spinner) {\r\n\r\n\t\treturn angular\r\n\t\t\t.module('angularSpinner', [])\r\n\r\n\t\t\t.constant('SpinJSSpinner', Spinner)\r\n\r\n\t\t\t.provider('usSpinnerConfig', function () {\r\n\t\t\t\tvar _config = {}, _themes = {};\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tsetDefaults: function (config) {\r\n\t\t\t\t\t\t_config = config || _config;\r\n\t\t\t\t\t},\r\n\t\t\t\t\tsetTheme: function(name, config) {\r\n\t\t\t\t\t\t_themes[name] = config;\r\n\t\t\t\t\t},\r\n\t\t\t\t\t$get: function () {\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tconfig: _config,\r\n\t\t\t\t\t\t\tthemes: _themes\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t})\r\n\r\n\t\t\t.factory('usSpinnerService', ['$rootScope', function ($rootScope) {\r\n\t\t\t\tvar config = {};\r\n\r\n\t\t\t\tconfig.spin = function (key) {\r\n\t\t\t\t\t$rootScope.$broadcast('us-spinner:spin', key);\r\n\t\t\t\t};\r\n\r\n\t\t\t\tconfig.stop = function (key) {\r\n\t\t\t\t\t$rootScope.$broadcast('us-spinner:stop', key);\r\n\t\t\t\t};\r\n\r\n\t\t\t\treturn config;\r\n\t\t\t}])\r\n\r\n\t\t\t.directive('usSpinner', ['SpinJSSpinner', 'usSpinnerConfig', function (SpinJSSpinner, usSpinnerConfig) {\r\n\t\t\t\treturn {\r\n\t\t\t\t\tscope: true,\r\n\t\t\t\t\tlink: function (scope, element, attr) {\r\n\t\t\t\t\t\tscope.spinner = null;\r\n\r\n\t\t\t\t\t\tscope.key = angular.isDefined(attr.spinnerKey) ? attr.spinnerKey : false;\r\n\r\n\t\t\t\t\t\tscope.startActive = angular.isDefined(attr.spinnerStartActive) ?\r\n\t\t\t\t\t\t\tscope.$eval(attr.spinnerStartActive) : scope.key ?\r\n\t\t\t\t\t\t\tfalse : true;\r\n\r\n\t\t\t\t\t\tfunction stopSpinner() {\r\n\t\t\t\t\t\t\tif (scope.spinner) {\r\n\t\t\t\t\t\t\t\tscope.spinner.stop();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscope.spin = function () {\r\n\t\t\t\t\t\t\tif (scope.spinner) {\r\n\t\t\t\t\t\t\t\tscope.spinner.spin(element[0]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tscope.stop = function () {\r\n\t\t\t\t\t\t\tscope.startActive = false;\r\n\t\t\t\t\t\t\tstopSpinner();\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tscope.$watch(attr.usSpinner, function (options) {\r\n\t\t\t\t\t\t\tstopSpinner();\r\n\r\n\t\t\t\t\t\t\t// order of precedence: element options, theme, defaults.\r\n\t\t\t\t\t\t\toptions = angular.extend(\r\n\t\t\t\t\t\t\t\t{},\r\n\t\t\t\t\t\t\t\tusSpinnerConfig.config,\r\n\t\t\t\t\t\t\t\tusSpinnerConfig.themes[attr.spinnerTheme],\r\n\t\t\t\t\t\t\t\toptions);\r\n\r\n\t\t\t\t\t\t\tscope.spinner = new SpinJSSpinner(options);\r\n\t\t\t\t\t\t\tif ((!scope.key || scope.startActive) && !attr.spinnerOn) {\r\n\t\t\t\t\t\t\t\tscope.spinner.spin(element[0]);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}, true);\r\n\r\n\t\t\t\t\t\tif (attr.spinnerOn) {\r\n\t\t\t\t\t\t\tscope.$watch(attr.spinnerOn, function (spin) {\r\n\t\t\t\t\t\t\t\tif (spin) {\r\n\t\t\t\t\t\t\t\t\tscope.spin();\r\n\t\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\t\tscope.stop();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tscope.$on('us-spinner:spin', function (event, key) {\r\n\t\t\t\t\t\t\tif (key === scope.key) {\r\n\t\t\t\t\t\t\t\tscope.spin();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tscope.$on('us-spinner:stop', function (event, key) {\r\n\t\t\t\t\t\t\tif (key === scope.key) {\r\n\t\t\t\t\t\t\t\tscope.stop();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tscope.$on('$destroy', function () {\r\n\t\t\t\t\t\t\tscope.stop();\r\n\t\t\t\t\t\t\tscope.spinner = null;\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}]);\r\n\t}\r\n\r\n    if ((typeof module === 'object') && module.exports) {\r\n\t\t/* CommonJS module */\r\n\t\tmodule.exports = factory(__webpack_require__(1), __webpack_require__(5));\r\n\t} else if (true) {\r\n\t\t/* AMD module */\r\n\t\t!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1), __webpack_require__(5)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\t} else {\r\n\t\t/* Browser global */\r\n\t\tfactory(root.angular, root.Spinner);\r\n\t}\r\n}(this));\r\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2FuZ3VsYXItc3Bpbm5lci9hbmd1bGFyLXNwaW5uZXIuanM/NTJlZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLG9CQUFvQjs7QUFFcEI7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPOztBQUVQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxDQUFDIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogYW5ndWxhci1zcGlubmVyIHZlcnNpb24gMC44LjFcclxuICogTGljZW5zZTogTUlULlxyXG4gKiBDb3B5cmlnaHQgKEMpIDIwMTMsIDIwMTQsIDIwMTUsIDIwMTYsIFVyaSBTaGFrZWQgYW5kIGNvbnRyaWJ1dG9ycy5cclxuICovXHJcblxyXG4nZm9ybWF0IGFtZCc7XHJcblxyXG4oZnVuY3Rpb24gKHJvb3QpIHtcclxuXHQndXNlIHN0cmljdCc7XHJcblxyXG5cdGZ1bmN0aW9uIGZhY3RvcnkoYW5ndWxhciwgU3Bpbm5lcikge1xyXG5cclxuXHRcdHJldHVybiBhbmd1bGFyXHJcblx0XHRcdC5tb2R1bGUoJ2FuZ3VsYXJTcGlubmVyJywgW10pXHJcblxyXG5cdFx0XHQuY29uc3RhbnQoJ1NwaW5KU1NwaW5uZXInLCBTcGlubmVyKVxyXG5cclxuXHRcdFx0LnByb3ZpZGVyKCd1c1NwaW5uZXJDb25maWcnLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0dmFyIF9jb25maWcgPSB7fSwgX3RoZW1lcyA9IHt9O1xyXG5cclxuXHRcdFx0XHRyZXR1cm4ge1xyXG5cdFx0XHRcdFx0c2V0RGVmYXVsdHM6IGZ1bmN0aW9uIChjb25maWcpIHtcclxuXHRcdFx0XHRcdFx0X2NvbmZpZyA9IGNvbmZpZyB8fCBfY29uZmlnO1xyXG5cdFx0XHRcdFx0fSxcclxuXHRcdFx0XHRcdHNldFRoZW1lOiBmdW5jdGlvbihuYW1lLCBjb25maWcpIHtcclxuXHRcdFx0XHRcdFx0X3RoZW1lc1tuYW1lXSA9IGNvbmZpZztcclxuXHRcdFx0XHRcdH0sXHJcblx0XHRcdFx0XHQkZ2V0OiBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdHJldHVybiB7XHJcblx0XHRcdFx0XHRcdFx0Y29uZmlnOiBfY29uZmlnLFxyXG5cdFx0XHRcdFx0XHRcdHRoZW1lczogX3RoZW1lc1xyXG5cdFx0XHRcdFx0XHR9O1xyXG5cdFx0XHRcdFx0fVxyXG5cdFx0XHRcdH07XHJcblx0XHRcdH0pXHJcblxyXG5cdFx0XHQuZmFjdG9yeSgndXNTcGlubmVyU2VydmljZScsIFsnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XHJcblx0XHRcdFx0dmFyIGNvbmZpZyA9IHt9O1xyXG5cclxuXHRcdFx0XHRjb25maWcuc3BpbiA9IGZ1bmN0aW9uIChrZXkpIHtcclxuXHRcdFx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgndXMtc3Bpbm5lcjpzcGluJywga2V5KTtcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRjb25maWcuc3RvcCA9IGZ1bmN0aW9uIChrZXkpIHtcclxuXHRcdFx0XHRcdCRyb290U2NvcGUuJGJyb2FkY2FzdCgndXMtc3Bpbm5lcjpzdG9wJywga2V5KTtcclxuXHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRyZXR1cm4gY29uZmlnO1xyXG5cdFx0XHR9XSlcclxuXHJcblx0XHRcdC5kaXJlY3RpdmUoJ3VzU3Bpbm5lcicsIFsnU3BpbkpTU3Bpbm5lcicsICd1c1NwaW5uZXJDb25maWcnLCBmdW5jdGlvbiAoU3BpbkpTU3Bpbm5lciwgdXNTcGlubmVyQ29uZmlnKSB7XHJcblx0XHRcdFx0cmV0dXJuIHtcclxuXHRcdFx0XHRcdHNjb3BlOiB0cnVlLFxyXG5cdFx0XHRcdFx0bGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyKSB7XHJcblx0XHRcdFx0XHRcdHNjb3BlLnNwaW5uZXIgPSBudWxsO1xyXG5cclxuXHRcdFx0XHRcdFx0c2NvcGUua2V5ID0gYW5ndWxhci5pc0RlZmluZWQoYXR0ci5zcGlubmVyS2V5KSA/IGF0dHIuc3Bpbm5lcktleSA6IGZhbHNlO1xyXG5cclxuXHRcdFx0XHRcdFx0c2NvcGUuc3RhcnRBY3RpdmUgPSBhbmd1bGFyLmlzRGVmaW5lZChhdHRyLnNwaW5uZXJTdGFydEFjdGl2ZSkgP1xyXG5cdFx0XHRcdFx0XHRcdHNjb3BlLiRldmFsKGF0dHIuc3Bpbm5lclN0YXJ0QWN0aXZlKSA6IHNjb3BlLmtleSA/XHJcblx0XHRcdFx0XHRcdFx0ZmFsc2UgOiB0cnVlO1xyXG5cclxuXHRcdFx0XHRcdFx0ZnVuY3Rpb24gc3RvcFNwaW5uZXIoKSB7XHJcblx0XHRcdFx0XHRcdFx0aWYgKHNjb3BlLnNwaW5uZXIpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHNjb3BlLnNwaW5uZXIuc3RvcCgpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fVxyXG5cclxuXHRcdFx0XHRcdFx0c2NvcGUuc3BpbiA9IGZ1bmN0aW9uICgpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoc2NvcGUuc3Bpbm5lcikge1xyXG5cdFx0XHRcdFx0XHRcdFx0c2NvcGUuc3Bpbm5lci5zcGluKGVsZW1lbnRbMF0pO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fTtcclxuXHJcblx0XHRcdFx0XHRcdHNjb3BlLnN0b3AgPSBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdFx0XHRcdFx0c2NvcGUuc3RhcnRBY3RpdmUgPSBmYWxzZTtcclxuXHRcdFx0XHRcdFx0XHRzdG9wU3Bpbm5lcigpO1xyXG5cdFx0XHRcdFx0XHR9O1xyXG5cclxuXHRcdFx0XHRcdFx0c2NvcGUuJHdhdGNoKGF0dHIudXNTcGlubmVyLCBmdW5jdGlvbiAob3B0aW9ucykge1xyXG5cdFx0XHRcdFx0XHRcdHN0b3BTcGlubmVyKCk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdC8vIG9yZGVyIG9mIHByZWNlZGVuY2U6IGVsZW1lbnQgb3B0aW9ucywgdGhlbWUsIGRlZmF1bHRzLlxyXG5cdFx0XHRcdFx0XHRcdG9wdGlvbnMgPSBhbmd1bGFyLmV4dGVuZChcclxuXHRcdFx0XHRcdFx0XHRcdHt9LFxyXG5cdFx0XHRcdFx0XHRcdFx0dXNTcGlubmVyQ29uZmlnLmNvbmZpZyxcclxuXHRcdFx0XHRcdFx0XHRcdHVzU3Bpbm5lckNvbmZpZy50aGVtZXNbYXR0ci5zcGlubmVyVGhlbWVdLFxyXG5cdFx0XHRcdFx0XHRcdFx0b3B0aW9ucyk7XHJcblxyXG5cdFx0XHRcdFx0XHRcdHNjb3BlLnNwaW5uZXIgPSBuZXcgU3BpbkpTU3Bpbm5lcihvcHRpb25zKTtcclxuXHRcdFx0XHRcdFx0XHRpZiAoKCFzY29wZS5rZXkgfHwgc2NvcGUuc3RhcnRBY3RpdmUpICYmICFhdHRyLnNwaW5uZXJPbikge1xyXG5cdFx0XHRcdFx0XHRcdFx0c2NvcGUuc3Bpbm5lci5zcGluKGVsZW1lbnRbMF0pO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSwgdHJ1ZSk7XHJcblxyXG5cdFx0XHRcdFx0XHRpZiAoYXR0ci5zcGlubmVyT24pIHtcclxuXHRcdFx0XHRcdFx0XHRzY29wZS4kd2F0Y2goYXR0ci5zcGlubmVyT24sIGZ1bmN0aW9uIChzcGluKSB7XHJcblx0XHRcdFx0XHRcdFx0XHRpZiAoc3Bpbikge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzY29wZS5zcGluKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xyXG5cdFx0XHRcdFx0XHRcdFx0XHRzY29wZS5zdG9wKCk7XHJcblx0XHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHRcdH1cclxuXHJcblx0XHRcdFx0XHRcdHNjb3BlLiRvbigndXMtc3Bpbm5lcjpzcGluJywgZnVuY3Rpb24gKGV2ZW50LCBrZXkpIHtcclxuXHRcdFx0XHRcdFx0XHRpZiAoa2V5ID09PSBzY29wZS5rZXkpIHtcclxuXHRcdFx0XHRcdFx0XHRcdHNjb3BlLnNwaW4oKTtcclxuXHRcdFx0XHRcdFx0XHR9XHJcblx0XHRcdFx0XHRcdH0pO1xyXG5cclxuXHRcdFx0XHRcdFx0c2NvcGUuJG9uKCd1cy1zcGlubmVyOnN0b3AnLCBmdW5jdGlvbiAoZXZlbnQsIGtleSkge1xyXG5cdFx0XHRcdFx0XHRcdGlmIChrZXkgPT09IHNjb3BlLmtleSkge1xyXG5cdFx0XHRcdFx0XHRcdFx0c2NvcGUuc3RvcCgpO1xyXG5cdFx0XHRcdFx0XHRcdH1cclxuXHRcdFx0XHRcdFx0fSk7XHJcblxyXG5cdFx0XHRcdFx0XHRzY29wZS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKCkge1xyXG5cdFx0XHRcdFx0XHRcdHNjb3BlLnN0b3AoKTtcclxuXHRcdFx0XHRcdFx0XHRzY29wZS5zcGlubmVyID0gbnVsbDtcclxuXHRcdFx0XHRcdFx0fSk7XHJcblx0XHRcdFx0XHR9XHJcblx0XHRcdFx0fTtcclxuXHRcdFx0fV0pO1xyXG5cdH1cclxuXHJcbiAgICBpZiAoKHR5cGVvZiBtb2R1bGUgPT09ICdvYmplY3QnKSAmJiBtb2R1bGUuZXhwb3J0cykge1xyXG5cdFx0LyogQ29tbW9uSlMgbW9kdWxlICovXHJcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZSgnYW5ndWxhcicpLCByZXF1aXJlKCdzcGluLmpzJykpO1xyXG5cdH0gZWxzZSBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XHJcblx0XHQvKiBBTUQgbW9kdWxlICovXHJcblx0XHRkZWZpbmUoWydhbmd1bGFyJywgJ3NwaW4nXSwgZmFjdG9yeSk7XHJcblx0fSBlbHNlIHtcclxuXHRcdC8qIEJyb3dzZXIgZ2xvYmFsICovXHJcblx0XHRmYWN0b3J5KHJvb3QuYW5ndWxhciwgcm9vdC5TcGlubmVyKTtcclxuXHR9XHJcbn0odGhpcykpO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vYW5ndWxhci1zcGlubmVyL2FuZ3VsYXItc3Bpbm5lci5qc1xuLy8gbW9kdWxlIGlkID0gNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*! ListController.js © yamoo9.net, 2016 */\n'use strict';\n\nvar angular = __webpack_require__(1);\n\nangular.module('BipanListApp').controller('ListController', ['$scope', 'ListDataShareService', function ($scope, ListDataShareService) {\n\n  // bipan 모델 데이터\n  $scope.share_data = ListDataShareService;\n\n  // 컨트롤러 $scope 객체의 속성\n  // $scope.search = {};\n  $scope.search = '';\n  $scope.order = 'name';\n\n  // 컨트롤러 $scope 객체의 메소드\n  $scope.selectPerson = function (person) {\n    $scope.share_data.selected_person = person;\n  };\n  $scope.loadMore = function () {\n    // 사용자가 브라우저의 하단 끝에서 스크롤 이벤트 발생\n    // 다음 페이지의 콘텐츠를 불러와야 합니다.\n    $scope.share_data.loadMore();\n  };\n\n  // 사용자가 입력하는 값을 관찰(Watch)\n  $scope.$watch('search', function (newValue) {\n    // 사용자 입력한 새로운 값: newValue\n    // 사용자 입력한 이전 값: oldValue\n    $scope.share_data.doSearch(newValue);\n  });\n  $scope.$watch('order', function (newValue) {\n    $scope.share_data.doOrder(newValue);\n  });\n\n  // 엄격하게 일치하는 검색 기능\n  // $scope.sensitiveSearch = function(person) {\n  //   var search = $scope.search;\n  //   if ( search ) {\n  //     return person.title.indexOf(search) === 0 ||\n  //            person.director.indexOf(search) === 0 ||\n  //            person.year.indexOf(search) === 0 ||\n  //            person.category.indexOf(search) === 0;\n  //   }\n  //   return true;\n  // };\n}]);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvY29udHJvbGxlcnMvTGlzdENvbnRyb2xsZXIuZXM2P2FmMmYiXSwibmFtZXMiOlsiYW5ndWxhciIsInJlcXVpcmUiLCJtb2R1bGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiTGlzdERhdGFTaGFyZVNlcnZpY2UiLCJzaGFyZV9kYXRhIiwic2VhcmNoIiwib3JkZXIiLCJzZWxlY3RQZXJzb24iLCJwZXJzb24iLCJzZWxlY3RlZF9wZXJzb24iLCJsb2FkTW9yZSIsIiR3YXRjaCIsIm5ld1ZhbHVlIiwiZG9TZWFyY2giLCJkb09yZGVyIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBLElBQUlBLFVBQVUsbUJBQUFDLENBQVEsQ0FBUixDQUFkOztBQUVBRCxRQUNHRSxNQURILENBQ1UsY0FEVixFQUVHQyxVQUZILENBRWMsZ0JBRmQsRUFHSSxDQUFDLFFBQUQsRUFBVyxzQkFBWCxFQUFtQyxVQUFDQyxNQUFELEVBQVNDLG9CQUFULEVBQWdDOztBQUVuRTtBQUNBRCxTQUFPRSxVQUFQLEdBQW9CRCxvQkFBcEI7O0FBRUE7QUFDQTtBQUNBRCxTQUFPRyxNQUFQLEdBQWdCLEVBQWhCO0FBQ0FILFNBQU9JLEtBQVAsR0FBZ0IsTUFBaEI7O0FBRUE7QUFDQUosU0FBT0ssWUFBUCxHQUFzQixVQUFDQyxNQUFELEVBQVc7QUFDL0JOLFdBQU9FLFVBQVAsQ0FBa0JLLGVBQWxCLEdBQW9DRCxNQUFwQztBQUNELEdBRkQ7QUFHQU4sU0FBT1EsUUFBUCxHQUFrQixZQUFJO0FBQ3BCO0FBQ0E7QUFDQVIsV0FBT0UsVUFBUCxDQUFrQk0sUUFBbEI7QUFDRCxHQUpEOztBQU1BO0FBQ0FSLFNBQU9TLE1BQVAsQ0FBYyxRQUFkLEVBQXdCLFVBQUNDLFFBQUQsRUFBYTtBQUNuQztBQUNBO0FBQ0FWLFdBQU9FLFVBQVAsQ0FBa0JTLFFBQWxCLENBQTJCRCxRQUEzQjtBQUNELEdBSkQ7QUFLQVYsU0FBT1MsTUFBUCxDQUFjLE9BQWQsRUFBdUIsVUFBQ0MsUUFBRCxFQUFhO0FBQ2xDVixXQUFPRSxVQUFQLENBQWtCVSxPQUFsQixDQUEwQkYsUUFBMUI7QUFDRCxHQUZEOztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFRCxDQTFDQyxDQUhKIiwiZmlsZSI6IjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgTGlzdENvbnRyb2xsZXIuanMgwqkgeWFtb285Lm5ldCwgMjAxNiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5sZXQgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcblxuYW5ndWxhclxuICAubW9kdWxlKCdCaXBhbkxpc3RBcHAnKVxuICAuY29udHJvbGxlcignTGlzdENvbnRyb2xsZXInLFxuICAgIFsnJHNjb3BlJywgJ0xpc3REYXRhU2hhcmVTZXJ2aWNlJywgKCRzY29wZSwgTGlzdERhdGFTaGFyZVNlcnZpY2UpPT57XG5cbiAgICAvLyBiaXBhbiDrqqjrjbgg642w7J207YSwXG4gICAgJHNjb3BlLnNoYXJlX2RhdGEgPSBMaXN0RGF0YVNoYXJlU2VydmljZTtcblxuICAgIC8vIOy7qO2KuOuhpOufrCAkc2NvcGUg6rCd7LK07J2YIOyGjeyEsVxuICAgIC8vICRzY29wZS5zZWFyY2ggPSB7fTtcbiAgICAkc2NvcGUuc2VhcmNoID0gJyc7XG4gICAgJHNjb3BlLm9yZGVyICA9ICduYW1lJztcblxuICAgIC8vIOy7qO2KuOuhpOufrCAkc2NvcGUg6rCd7LK07J2YIOuplOyGjOuTnFxuICAgICRzY29wZS5zZWxlY3RQZXJzb24gPSAocGVyc29uKT0+IHtcbiAgICAgICRzY29wZS5zaGFyZV9kYXRhLnNlbGVjdGVkX3BlcnNvbiA9IHBlcnNvbjtcbiAgICB9O1xuICAgICRzY29wZS5sb2FkTW9yZSA9ICgpPT57XG4gICAgICAvLyDsgqzsmqnsnpDqsIAg67iM65287Jqw7KCA7J2YIO2VmOuLqCDrgZ3sl5DshJwg7Iqk7YGs66GkIOydtOuypO2KuCDrsJzsg51cbiAgICAgIC8vIOuLpOydjCDtjpjsnbTsp4DsnZgg7L2Y7YWQ7Lig66W8IOu2iOufrOyZgOyVvCDtlanri4jri6QuXG4gICAgICAkc2NvcGUuc2hhcmVfZGF0YS5sb2FkTW9yZSgpO1xuICAgIH07XG5cbiAgICAvLyDsgqzsmqnsnpDqsIAg7J6F66Cl7ZWY64qUIOqwkuydhCDqtIDssLAoV2F0Y2gpXG4gICAgJHNjb3BlLiR3YXRjaCgnc2VhcmNoJywgKG5ld1ZhbHVlKT0+IHtcbiAgICAgIC8vIOyCrOyaqeyekCDsnoXroKXtlZwg7IOI66Gc7Jq0IOqwkjogbmV3VmFsdWVcbiAgICAgIC8vIOyCrOyaqeyekCDsnoXroKXtlZwg7J207KCEIOqwkjogb2xkVmFsdWVcbiAgICAgICRzY29wZS5zaGFyZV9kYXRhLmRvU2VhcmNoKG5ld1ZhbHVlKTtcbiAgICB9KTtcbiAgICAkc2NvcGUuJHdhdGNoKCdvcmRlcicsIChuZXdWYWx1ZSk9PiB7XG4gICAgICAkc2NvcGUuc2hhcmVfZGF0YS5kb09yZGVyKG5ld1ZhbHVlKTtcbiAgICB9KTtcblxuICAgIC8vIOyXhOqyqe2VmOqyjCDsnbzsuZjtlZjripQg6rKA7IOJIOq4sOuKpVxuICAgIC8vICRzY29wZS5zZW5zaXRpdmVTZWFyY2ggPSBmdW5jdGlvbihwZXJzb24pIHtcbiAgICAvLyAgIHZhciBzZWFyY2ggPSAkc2NvcGUuc2VhcmNoO1xuICAgIC8vICAgaWYgKCBzZWFyY2ggKSB7XG4gICAgLy8gICAgIHJldHVybiBwZXJzb24udGl0bGUuaW5kZXhPZihzZWFyY2gpID09PSAwIHx8XG4gICAgLy8gICAgICAgICAgICBwZXJzb24uZGlyZWN0b3IuaW5kZXhPZihzZWFyY2gpID09PSAwIHx8XG4gICAgLy8gICAgICAgICAgICBwZXJzb24ueWVhci5pbmRleE9mKHNlYXJjaCkgPT09IDAgfHxcbiAgICAvLyAgICAgICAgICAgIHBlcnNvbi5jYXRlZ29yeS5pbmRleE9mKHNlYXJjaCkgPT09IDA7XG4gICAgLy8gICB9XG4gICAgLy8gICByZXR1cm4gdHJ1ZTtcbiAgICAvLyB9O1xuXG4gIH1dKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9jb250cm9sbGVycy9MaXN0Q29udHJvbGxlci5lczYiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*! DetailController.js © yamoo9.net, 2016 */\n'use strict';\n\nvar angular = __webpack_require__(1);\n\nangular.module('BipanListApp').controller('DetailController', ['$scope', 'ListDataShareService', function ($scope, ListDataShareService) {\n  $scope.share_data = ListDataShareService;\n}]);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvY29udHJvbGxlcnMvRGV0YWlsQ29udHJvbGxlci5lczY/MThmNyJdLCJuYW1lcyI6WyJhbmd1bGFyIiwicmVxdWlyZSIsIm1vZHVsZSIsImNvbnRyb2xsZXIiLCIkc2NvcGUiLCJMaXN0RGF0YVNoYXJlU2VydmljZSIsInNoYXJlX2RhdGEiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsSUFBSUEsVUFBVSxtQkFBQUMsQ0FBUSxDQUFSLENBQWQ7O0FBRUFELFFBQ0dFLE1BREgsQ0FDVSxjQURWLEVBRUdDLFVBRkgsQ0FFYyxrQkFGZCxFQUdJLENBQUMsUUFBRCxFQUFXLHNCQUFYLEVBQW1DLFVBQUNDLE1BQUQsRUFBU0Msb0JBQVQsRUFBZ0M7QUFDakVELFNBQU9FLFVBQVAsR0FBb0JELG9CQUFwQjtBQUNILENBRkMsQ0FISiIsImZpbGUiOiI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyohIERldGFpbENvbnRyb2xsZXIuanMgwqkgeWFtb285Lm5ldCwgMjAxNiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5sZXQgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcblxuYW5ndWxhclxuICAubW9kdWxlKCdCaXBhbkxpc3RBcHAnKVxuICAuY29udHJvbGxlcignRGV0YWlsQ29udHJvbGxlcicsXG4gICAgWyckc2NvcGUnLCAnTGlzdERhdGFTaGFyZVNlcnZpY2UnLCAoJHNjb3BlLCBMaXN0RGF0YVNoYXJlU2VydmljZSk9PntcbiAgICAgICRzY29wZS5zaGFyZV9kYXRhID0gTGlzdERhdGFTaGFyZVNlcnZpY2U7XG4gIH1dKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9qcy9jb250cm9sbGVycy9EZXRhaWxDb250cm9sbGVyLmVzNiJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*! ListDataShareService.js © yamoo9.net, 2016 */\n'use strict';\n\nvar angular = __webpack_require__(1);\n\nangular.module('BipanListApp').factory('Contact', ['$resource', function ($resource) {\n  var url = 'https://codecraftpro.com/api/samples/v1/contact/:id/';\n  return $resource(url);\n}]).service('ListDataShareService', ['Contact', function (Contact) {\n\n  // 서비스 객체 초기화 함수(비공개)\n  var initServiceSetting = function initServiceSetting() {\n    _service.people = [];\n    _service.page = 1;\n    _service.has_more = true;\n  };\n\n  var _service = {\n    // 초기 선택된 사람 초기화\n    'selected_person': null,\n    // 초기 피플 데이터 리스트\n    'people': [],\n    // 초기 페이지 인덱스\n    'page': 1,\n    'has_more': true,\n    'is_loading': false,\n    // doSearch Method\n    'doSearch': function doSearch(search) {\n      _service.search = search;\n      initServiceSetting();\n      _service.loadContacts();\n    },\n    // doOrder Method\n    'doOrder': function doOrder(order) {\n      _service.ordering = order;\n      initServiceSetting();\n      _service.loadContacts();\n    },\n    // loadContacts Method\n    'loadContacts': function loadContacts() {\n      if (_service.has_more && !_service.is_loading) {\n\n        _service.is_loading = true;\n\n        // 서버에 전송할 파라미터(매개변수)\n        var params = {\n          'page': _service.page,\n          'search': _service.search,\n          'ordering': _service.ordering\n        };\n        // 서버에 요청(GET)\n        Contact.get(params, function (data) {\n          angular.forEach(data.results, function (person) {\n            _service.people.push(new Contact(person));\n          });\n          // 더 이상 불러올 다음 데이터가 존재하지 않을 경우\n          // _service 객체의 has_more 속성을 false로 변경\n          if (!data.next) {\n            _service.has_more = false;\n          }\n          _service.is_loading = false;\n        });\n      }\n    },\n    'loadMore': function loadMore() {\n      if (_service.has_more && !_service.is_loading) {\n        // 다음 페이지를 불러오기 위한 페이지 값 증가\n        _service.page += 1;\n        // 콘텐츠 로드 처리 실행\n        _service.loadContacts(); // page = 2, 3, ...\n      }\n    }\n  };\n\n  _service.loadContacts(); // 초기 실행 page = 1\n\n  return _service;\n}]);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvc2VydmljZXMvTGlzdERhdGFTaGFyZVNlcnZpY2UuZXM2PzBmZWEiXSwibmFtZXMiOlsiYW5ndWxhciIsInJlcXVpcmUiLCJtb2R1bGUiLCJmYWN0b3J5IiwiJHJlc291cmNlIiwidXJsIiwic2VydmljZSIsIkNvbnRhY3QiLCJpbml0U2VydmljZVNldHRpbmciLCJfc2VydmljZSIsInBlb3BsZSIsInBhZ2UiLCJoYXNfbW9yZSIsInNlYXJjaCIsImxvYWRDb250YWN0cyIsIm9yZGVyIiwib3JkZXJpbmciLCJpc19sb2FkaW5nIiwicGFyYW1zIiwiZ2V0IiwiZGF0YSIsImZvckVhY2giLCJyZXN1bHRzIiwicGVyc29uIiwicHVzaCIsIm5leHQiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUEsSUFBSUEsVUFBVSxtQkFBQUMsQ0FBUSxDQUFSLENBQWQ7O0FBRUFELFFBQ0dFLE1BREgsQ0FDVSxjQURWLEVBRUdDLE9BRkgsQ0FFVyxTQUZYLEVBRXNCLENBQUMsV0FBRCxFQUFjLFVBQVNDLFNBQVQsRUFBbUI7QUFDbkQsTUFBSUMsTUFBTSxzREFBVjtBQUNBLFNBQU9ELFVBQVVDLEdBQVYsQ0FBUDtBQUNELENBSG1CLENBRnRCLEVBTUdDLE9BTkgsQ0FNVyxzQkFOWCxFQU1tQyxDQUFDLFNBQUQsRUFBWSxVQUFDQyxPQUFELEVBQVc7O0FBRXREO0FBQ0EsTUFBSUMscUJBQXFCLFNBQXJCQSxrQkFBcUIsR0FBSztBQUM1QkMsYUFBU0MsTUFBVCxHQUFvQixFQUFwQjtBQUNBRCxhQUFTRSxJQUFULEdBQW9CLENBQXBCO0FBQ0FGLGFBQVNHLFFBQVQsR0FBb0IsSUFBcEI7QUFDRCxHQUpEOztBQU1BLE1BQUlILFdBQVc7QUFDYjtBQUNBLHVCQUFvQixJQUZQO0FBR2I7QUFDQSxjQUFlLEVBSkY7QUFLYjtBQUNBLFlBQWUsQ0FORjtBQU9iLGdCQUFlLElBUEY7QUFRYixrQkFBZSxLQVJGO0FBU2I7QUFDQSxnQkFBWSxrQkFBQ0ksTUFBRCxFQUFXO0FBQ3JCSixlQUFTSSxNQUFULEdBQWtCQSxNQUFsQjtBQUNBTDtBQUNBQyxlQUFTSyxZQUFUO0FBQ0QsS0FkWTtBQWViO0FBQ0EsZUFBVyxpQkFBQ0MsS0FBRCxFQUFVO0FBQ25CTixlQUFTTyxRQUFULEdBQW9CRCxLQUFwQjtBQUNBUDtBQUNBQyxlQUFTSyxZQUFUO0FBQ0QsS0FwQlk7QUFxQmI7QUFDQSxvQkFBZ0Isd0JBQUs7QUFDbkIsVUFBS0wsU0FBU0csUUFBVCxJQUFxQixDQUFDSCxTQUFTUSxVQUFwQyxFQUFpRDs7QUFFL0NSLGlCQUFTUSxVQUFULEdBQXNCLElBQXRCOztBQUVBO0FBQ0EsWUFBSUMsU0FBUztBQUNYLGtCQUFhVCxTQUFTRSxJQURYO0FBRVgsb0JBQWFGLFNBQVNJLE1BRlg7QUFHWCxzQkFBYUosU0FBU087QUFIWCxTQUFiO0FBS0E7QUFDQVQsZ0JBQVFZLEdBQVIsQ0FBWUQsTUFBWixFQUFvQixVQUFDRSxJQUFELEVBQVE7QUFDMUJwQixrQkFBUXFCLE9BQVIsQ0FBZ0JELEtBQUtFLE9BQXJCLEVBQThCLFVBQUNDLE1BQUQsRUFBVTtBQUN0Q2QscUJBQVNDLE1BQVQsQ0FBZ0JjLElBQWhCLENBQXNCLElBQUlqQixPQUFKLENBQVlnQixNQUFaLENBQXRCO0FBQ0QsV0FGRDtBQUdBO0FBQ0E7QUFDQSxjQUFJLENBQUNILEtBQUtLLElBQVYsRUFBZ0I7QUFDZGhCLHFCQUFTRyxRQUFULEdBQW9CLEtBQXBCO0FBQ0Q7QUFDREgsbUJBQVNRLFVBQVQsR0FBc0IsS0FBdEI7QUFDRCxTQVZEO0FBWUQ7QUFDRixLQS9DWTtBQWdEYixnQkFBWSxvQkFBSztBQUNmLFVBQUtSLFNBQVNHLFFBQVQsSUFBcUIsQ0FBQ0gsU0FBU1EsVUFBcEMsRUFBaUQ7QUFDL0M7QUFDQVIsaUJBQVNFLElBQVQsSUFBaUIsQ0FBakI7QUFDQTtBQUNBRixpQkFBU0ssWUFBVCxHQUorQyxDQUl0QjtBQUMxQjtBQUNGO0FBdkRZLEdBQWY7O0FBMERBTCxXQUFTSyxZQUFULEdBbkVzRCxDQW1FN0I7O0FBRXpCLFNBQU9MLFFBQVA7QUFFRCxDQXZFZ0MsQ0FObkMiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qISBMaXN0RGF0YVNoYXJlU2VydmljZS5qcyDCqSB5YW1vbzkubmV0LCAyMDE2ICovXG4ndXNlIHN0cmljdCc7XG5cbmxldCBhbmd1bGFyID0gcmVxdWlyZSgnYW5ndWxhcicpO1xuXG5hbmd1bGFyXG4gIC5tb2R1bGUoJ0JpcGFuTGlzdEFwcCcpXG4gIC5mYWN0b3J5KCdDb250YWN0JywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbigkcmVzb3VyY2Upe1xuICAgIGxldCB1cmwgPSAnaHR0cHM6Ly9jb2RlY3JhZnRwcm8uY29tL2FwaS9zYW1wbGVzL3YxL2NvbnRhY3QvOmlkLyc7XG4gICAgcmV0dXJuICRyZXNvdXJjZSh1cmwpO1xuICB9XSlcbiAgLnNlcnZpY2UoJ0xpc3REYXRhU2hhcmVTZXJ2aWNlJywgWydDb250YWN0JywgKENvbnRhY3QpPT57XG5cbiAgICAvLyDshJzruYTsiqQg6rCd7LK0IOy0iOq4sO2ZlCDtlajsiJgo67mE6rO16rCcKVxuICAgIGxldCBpbml0U2VydmljZVNldHRpbmcgPSAoKT0+IHtcbiAgICAgIF9zZXJ2aWNlLnBlb3BsZSAgID0gW107XG4gICAgICBfc2VydmljZS5wYWdlICAgICA9IDE7XG4gICAgICBfc2VydmljZS5oYXNfbW9yZSA9IHRydWU7XG4gICAgfTtcblxuICAgIGxldCBfc2VydmljZSA9IHtcbiAgICAgIC8vIOy0iOq4sCDshKDtg53rkJwg7IKs656MIOy0iOq4sO2ZlFxuICAgICAgJ3NlbGVjdGVkX3BlcnNvbicgOiBudWxsLFxuICAgICAgLy8g7LSI6riwIO2UvO2UjCDrjbDsnbTthLAg66as7Iqk7Yq4XG4gICAgICAncGVvcGxlJyAgICAgOiBbXSxcbiAgICAgIC8vIOy0iOq4sCDtjpjsnbTsp4Ag7J24642x7IqkXG4gICAgICAncGFnZScgICAgICAgOiAxLFxuICAgICAgJ2hhc19tb3JlJyAgIDogdHJ1ZSxcbiAgICAgICdpc19sb2FkaW5nJyA6IGZhbHNlLFxuICAgICAgLy8gZG9TZWFyY2ggTWV0aG9kXG4gICAgICAnZG9TZWFyY2gnOiAoc2VhcmNoKT0+IHtcbiAgICAgICAgX3NlcnZpY2Uuc2VhcmNoID0gc2VhcmNoO1xuICAgICAgICBpbml0U2VydmljZVNldHRpbmcoKTtcbiAgICAgICAgX3NlcnZpY2UubG9hZENvbnRhY3RzKCk7XG4gICAgICB9LFxuICAgICAgLy8gZG9PcmRlciBNZXRob2RcbiAgICAgICdkb09yZGVyJzogKG9yZGVyKT0+IHtcbiAgICAgICAgX3NlcnZpY2Uub3JkZXJpbmcgPSBvcmRlcjtcbiAgICAgICAgaW5pdFNlcnZpY2VTZXR0aW5nKCk7XG4gICAgICAgIF9zZXJ2aWNlLmxvYWRDb250YWN0cygpO1xuICAgICAgfSxcbiAgICAgIC8vIGxvYWRDb250YWN0cyBNZXRob2RcbiAgICAgICdsb2FkQ29udGFjdHMnOiAoKT0+IHtcbiAgICAgICAgaWYgKCBfc2VydmljZS5oYXNfbW9yZSAmJiAhX3NlcnZpY2UuaXNfbG9hZGluZyApIHtcblxuICAgICAgICAgIF9zZXJ2aWNlLmlzX2xvYWRpbmcgPSB0cnVlO1xuXG4gICAgICAgICAgLy8g7ISc67KE7JeQIOyghOyGoe2VoCDtjIzrnbzrr7jthLAo66ek6rCc67OA7IiYKVxuICAgICAgICAgIGxldCBwYXJhbXMgPSB7XG4gICAgICAgICAgICAncGFnZScgICAgIDogX3NlcnZpY2UucGFnZSxcbiAgICAgICAgICAgICdzZWFyY2gnICAgOiBfc2VydmljZS5zZWFyY2gsXG4gICAgICAgICAgICAnb3JkZXJpbmcnIDogX3NlcnZpY2Uub3JkZXJpbmcsXG4gICAgICAgICAgfTtcbiAgICAgICAgICAvLyDshJzrsoTsl5Ag7JqU7LKtKEdFVClcbiAgICAgICAgICBDb250YWN0LmdldChwYXJhbXMsIChkYXRhKT0+e1xuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGRhdGEucmVzdWx0cywgKHBlcnNvbik9PntcbiAgICAgICAgICAgICAgX3NlcnZpY2UucGVvcGxlLnB1c2goIG5ldyBDb250YWN0KHBlcnNvbikgKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8g642UIOydtOyDgSDrtojrn6zsmKwg64uk7J2MIOuNsOydtO2EsOqwgCDsobTsnqztlZjsp4Ag7JWK7J2EIOqyveyasFxuICAgICAgICAgICAgLy8gX3NlcnZpY2Ug6rCd7LK07J2YIGhhc19tb3JlIOyGjeyEseydhCBmYWxzZeuhnCDrs4Dqsr1cbiAgICAgICAgICAgIGlmICghZGF0YS5uZXh0KSB7XG4gICAgICAgICAgICAgIF9zZXJ2aWNlLmhhc19tb3JlID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBfc2VydmljZS5pc19sb2FkaW5nID0gZmFsc2U7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdsb2FkTW9yZSc6ICgpPT4ge1xuICAgICAgICBpZiAoIF9zZXJ2aWNlLmhhc19tb3JlICYmICFfc2VydmljZS5pc19sb2FkaW5nICkge1xuICAgICAgICAgIC8vIOuLpOydjCDtjpjsnbTsp4Drpbwg67aI65+s7Jik6riwIOychO2VnCDtjpjsnbTsp4Ag6rCSIOymneqwgFxuICAgICAgICAgIF9zZXJ2aWNlLnBhZ2UgKz0gMTtcbiAgICAgICAgICAvLyDsvZjthZDsuKAg66Gc65OcIOyymOumrCDsi6TtlolcbiAgICAgICAgICBfc2VydmljZS5sb2FkQ29udGFjdHMoKTsgLy8gcGFnZSA9IDIsIDMsIC4uLlxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9zZXJ2aWNlLmxvYWRDb250YWN0cygpOyAvLyDstIjquLAg7Iuk7ZaJIHBhZ2UgPSAxXG5cbiAgICByZXR1cm4gX3NlcnZpY2U7XG5cbiAgfV0pO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2pzL3NlcnZpY2VzL0xpc3REYXRhU2hhcmVTZXJ2aWNlLmVzNiJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	eval("/*! readingZeroFilter.js © yamoo9.net, 2016 */\n'use strict';\n\nvar angular = __webpack_require__(1);\n\nangular.module('BipanListApp').filter('readingZero', function () {\n  return function (input) {\n    return input < 10 ? '0' + input : input;\n  };\n});//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvanMvZmlsdGVycy9yZWFkaW5nWmVyb0ZpbHRlci5lczY/OTg2MiJdLCJuYW1lcyI6WyJhbmd1bGFyIiwicmVxdWlyZSIsIm1vZHVsZSIsImZpbHRlciIsImlucHV0Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBOztBQUVBLElBQUlBLFVBQVUsbUJBQUFDLENBQVEsQ0FBUixDQUFkOztBQUVBRCxRQUNHRSxNQURILENBQ1UsY0FEVixFQUVHQyxNQUZILENBRVUsYUFGVixFQUV5QixZQUFLO0FBQzFCLFNBQU8sVUFBQ0MsS0FBRCxFQUFVO0FBQ2YsV0FBT0EsUUFBUSxFQUFSLEdBQWMsTUFBTUEsS0FBcEIsR0FBNkJBLEtBQXBDO0FBQ0QsR0FGRDtBQUdELENBTkgiLCJmaWxlIjoiMTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiEgcmVhZGluZ1plcm9GaWx0ZXIuanMgwqkgeWFtb285Lm5ldCwgMjAxNiAqL1xuJ3VzZSBzdHJpY3QnO1xuXG5sZXQgYW5ndWxhciA9IHJlcXVpcmUoJ2FuZ3VsYXInKTtcblxuYW5ndWxhclxuICAubW9kdWxlKCdCaXBhbkxpc3RBcHAnKVxuICAuZmlsdGVyKCdyZWFkaW5nWmVybycsICgpPT4ge1xuICAgIHJldHVybiAoaW5wdXQpPT4ge1xuICAgICAgcmV0dXJuIGlucHV0IDwgMTAgPyAoJzAnICsgaW5wdXQpIDogaW5wdXQ7XG4gICAgfTtcbiAgfSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvanMvZmlsdGVycy9yZWFkaW5nWmVyb0ZpbHRlci5lczYiXSwic291cmNlUm9vdCI6IiJ9");

/***/ }
/******/ ]);